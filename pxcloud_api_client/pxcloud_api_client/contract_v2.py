# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class ContractV2(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            contractNumber = schemas.StrSchema
            contractStatus = schemas.StrSchema
            contractValue = schemas.Int64Schema
            coverageStartDate = schemas.StrSchema
            coverageEndDate = schemas.StrSchema
            
            
            class customerDetails(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CustomerDetails']:
                        return CustomerDetails
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CustomerDetails'], typing.List['CustomerDetails']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customerDetails':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CustomerDetails':
                    return super().__getitem__(i)
            serviceLevel = schemas.StrSchema
            
            
            class successTrackIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'successTrackIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            onboardedStatus = schemas.Int64Schema
            __annotations__ = {
                "contractNumber": contractNumber,
                "contractStatus": contractStatus,
                "contractValue": contractValue,
                "coverageStartDate": coverageStartDate,
                "coverageEndDate": coverageEndDate,
                "customerDetails": customerDetails,
                "serviceLevel": serviceLevel,
                "successTrackIds": successTrackIds,
                "onboardedStatus": onboardedStatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractNumber"]) -> MetaOapg.properties.contractNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractStatus"]) -> MetaOapg.properties.contractStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractValue"]) -> MetaOapg.properties.contractValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverageStartDate"]) -> MetaOapg.properties.coverageStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverageEndDate"]) -> MetaOapg.properties.coverageEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerDetails"]) -> MetaOapg.properties.customerDetails: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceLevel"]) -> MetaOapg.properties.serviceLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successTrackIds"]) -> MetaOapg.properties.successTrackIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboardedStatus"]) -> MetaOapg.properties.onboardedStatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contractNumber", "contractStatus", "contractValue", "coverageStartDate", "coverageEndDate", "customerDetails", "serviceLevel", "successTrackIds", "onboardedStatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractNumber"]) -> typing.Union[MetaOapg.properties.contractNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractStatus"]) -> typing.Union[MetaOapg.properties.contractStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractValue"]) -> typing.Union[MetaOapg.properties.contractValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverageStartDate"]) -> typing.Union[MetaOapg.properties.coverageStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverageEndDate"]) -> typing.Union[MetaOapg.properties.coverageEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerDetails"]) -> typing.Union[MetaOapg.properties.customerDetails, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceLevel"]) -> typing.Union[MetaOapg.properties.serviceLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successTrackIds"]) -> typing.Union[MetaOapg.properties.successTrackIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboardedStatus"]) -> typing.Union[MetaOapg.properties.onboardedStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contractNumber", "contractStatus", "contractValue", "coverageStartDate", "coverageEndDate", "customerDetails", "serviceLevel", "successTrackIds", "onboardedStatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        contractNumber: typing.Union[MetaOapg.properties.contractNumber, str, schemas.Unset] = schemas.unset,
        contractStatus: typing.Union[MetaOapg.properties.contractStatus, str, schemas.Unset] = schemas.unset,
        contractValue: typing.Union[MetaOapg.properties.contractValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        coverageStartDate: typing.Union[MetaOapg.properties.coverageStartDate, str, schemas.Unset] = schemas.unset,
        coverageEndDate: typing.Union[MetaOapg.properties.coverageEndDate, str, schemas.Unset] = schemas.unset,
        customerDetails: typing.Union[MetaOapg.properties.customerDetails, list, tuple, schemas.Unset] = schemas.unset,
        serviceLevel: typing.Union[MetaOapg.properties.serviceLevel, str, schemas.Unset] = schemas.unset,
        successTrackIds: typing.Union[MetaOapg.properties.successTrackIds, list, tuple, schemas.Unset] = schemas.unset,
        onboardedStatus: typing.Union[MetaOapg.properties.onboardedStatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractV2':
        return super().__new__(
            cls,
            *_args,
            contractNumber=contractNumber,
            contractStatus=contractStatus,
            contractValue=contractValue,
            coverageStartDate=coverageStartDate,
            coverageEndDate=coverageEndDate,
            customerDetails=customerDetails,
            serviceLevel=serviceLevel,
            successTrackIds=successTrackIds,
            onboardedStatus=onboardedStatus,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.customer_details import CustomerDetails
