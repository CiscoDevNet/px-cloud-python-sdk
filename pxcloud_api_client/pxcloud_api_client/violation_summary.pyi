# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class ViolationSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            severity = schemas.StrSchema
            severityId = schemas.StrSchema
            policyGroupId = schemas.StrSchema
            policyGroupName = schemas.StrSchema
            policyId = schemas.StrSchema
            policyName = schemas.StrSchema
            ruleId = schemas.StrSchema
            ruleTitle = schemas.StrSchema
            violationCount = schemas.Int64Schema
            affectedAssetsCount = schemas.Int64Schema
            policyCategory = schemas.StrSchema
            __annotations__ = {
                "severity": severity,
                "severityId": severityId,
                "policyGroupId": policyGroupId,
                "policyGroupName": policyGroupName,
                "policyId": policyId,
                "policyName": policyName,
                "ruleId": ruleId,
                "ruleTitle": ruleTitle,
                "violationCount": violationCount,
                "affectedAssetsCount": affectedAssetsCount,
                "policyCategory": policyCategory,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severityId"]) -> MetaOapg.properties.severityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyGroupId"]) -> MetaOapg.properties.policyGroupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyGroupName"]) -> MetaOapg.properties.policyGroupName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyId"]) -> MetaOapg.properties.policyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyName"]) -> MetaOapg.properties.policyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleId"]) -> MetaOapg.properties.ruleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ruleTitle"]) -> MetaOapg.properties.ruleTitle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["violationCount"]) -> MetaOapg.properties.violationCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affectedAssetsCount"]) -> MetaOapg.properties.affectedAssetsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyCategory"]) -> MetaOapg.properties.policyCategory: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["severity", "severityId", "policyGroupId", "policyGroupName", "policyId", "policyName", "ruleId", "ruleTitle", "violationCount", "affectedAssetsCount", "policyCategory", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severityId"]) -> typing.Union[MetaOapg.properties.severityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyGroupId"]) -> typing.Union[MetaOapg.properties.policyGroupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyGroupName"]) -> typing.Union[MetaOapg.properties.policyGroupName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyId"]) -> typing.Union[MetaOapg.properties.policyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyName"]) -> typing.Union[MetaOapg.properties.policyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleId"]) -> typing.Union[MetaOapg.properties.ruleId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ruleTitle"]) -> typing.Union[MetaOapg.properties.ruleTitle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["violationCount"]) -> typing.Union[MetaOapg.properties.violationCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affectedAssetsCount"]) -> typing.Union[MetaOapg.properties.affectedAssetsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyCategory"]) -> typing.Union[MetaOapg.properties.policyCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["severity", "severityId", "policyGroupId", "policyGroupName", "policyId", "policyName", "ruleId", "ruleTitle", "violationCount", "affectedAssetsCount", "policyCategory", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        severityId: typing.Union[MetaOapg.properties.severityId, str, schemas.Unset] = schemas.unset,
        policyGroupId: typing.Union[MetaOapg.properties.policyGroupId, str, schemas.Unset] = schemas.unset,
        policyGroupName: typing.Union[MetaOapg.properties.policyGroupName, str, schemas.Unset] = schemas.unset,
        policyId: typing.Union[MetaOapg.properties.policyId, str, schemas.Unset] = schemas.unset,
        policyName: typing.Union[MetaOapg.properties.policyName, str, schemas.Unset] = schemas.unset,
        ruleId: typing.Union[MetaOapg.properties.ruleId, str, schemas.Unset] = schemas.unset,
        ruleTitle: typing.Union[MetaOapg.properties.ruleTitle, str, schemas.Unset] = schemas.unset,
        violationCount: typing.Union[MetaOapg.properties.violationCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        affectedAssetsCount: typing.Union[MetaOapg.properties.affectedAssetsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        policyCategory: typing.Union[MetaOapg.properties.policyCategory, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ViolationSummary':
        return super().__new__(
            cls,
            *_args,
            severity=severity,
            severityId=severityId,
            policyGroupId=policyGroupId,
            policyGroupName=policyGroupName,
            policyId=policyId,
            policyName=policyName,
            ruleId=ruleId,
            ruleTitle=ruleTitle,
            violationCount=violationCount,
            affectedAssetsCount=affectedAssetsCount,
            policyCategory=policyCategory,
            _configuration=_configuration,
            **kwargs,
        )
