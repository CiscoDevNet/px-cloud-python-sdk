# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class RacetrackBuidPitstopAction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "isCompleteManual",
            "isCompleteAuto",
            "name",
            "description",
            "isManualCheckAllowed",
            "isManaualOverride",
            "tooltips",
            "isComplete",
            "updateMethod",
        }
        
        class properties:
            name = schemas.StrSchema
            description = schemas.StrSchema
            isManualCheckAllowed = schemas.BoolSchema
            isComplete = schemas.BoolSchema
            
            
            class updateMethod(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NA(cls):
                    return cls("NA")
                
                @schemas.classproperty
                def MANUAL(cls):
                    return cls("MANUAL")
                
                @schemas.classproperty
                def AUTO(cls):
                    return cls("AUTO")
            isCompleteAuto = schemas.BoolSchema
            isCompleteManual = schemas.BoolSchema
            isManaualOverride = schemas.BoolSchema
            
            
            class tooltips(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RacetrackTooltip']:
                        return RacetrackTooltip
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RacetrackTooltip'], typing.List['RacetrackTooltip']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tooltips':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RacetrackTooltip':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "description": description,
                "isManualCheckAllowed": isManualCheckAllowed,
                "isComplete": isComplete,
                "updateMethod": updateMethod,
                "isCompleteAuto": isCompleteAuto,
                "isCompleteManual": isCompleteManual,
                "isManaualOverride": isManaualOverride,
                "tooltips": tooltips,
            }
    
    isCompleteManual: MetaOapg.properties.isCompleteManual
    isCompleteAuto: MetaOapg.properties.isCompleteAuto
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    isManualCheckAllowed: MetaOapg.properties.isManualCheckAllowed
    isManaualOverride: MetaOapg.properties.isManaualOverride
    tooltips: MetaOapg.properties.tooltips
    isComplete: MetaOapg.properties.isComplete
    updateMethod: MetaOapg.properties.updateMethod
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isManualCheckAllowed"]) -> MetaOapg.properties.isManualCheckAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isComplete"]) -> MetaOapg.properties.isComplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updateMethod"]) -> MetaOapg.properties.updateMethod: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCompleteAuto"]) -> MetaOapg.properties.isCompleteAuto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isCompleteManual"]) -> MetaOapg.properties.isCompleteManual: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isManaualOverride"]) -> MetaOapg.properties.isManaualOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tooltips"]) -> MetaOapg.properties.tooltips: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "isManualCheckAllowed", "isComplete", "updateMethod", "isCompleteAuto", "isCompleteManual", "isManaualOverride", "tooltips", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isManualCheckAllowed"]) -> MetaOapg.properties.isManualCheckAllowed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isComplete"]) -> MetaOapg.properties.isComplete: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updateMethod"]) -> MetaOapg.properties.updateMethod: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCompleteAuto"]) -> MetaOapg.properties.isCompleteAuto: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isCompleteManual"]) -> MetaOapg.properties.isCompleteManual: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isManaualOverride"]) -> MetaOapg.properties.isManaualOverride: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tooltips"]) -> MetaOapg.properties.tooltips: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "isManualCheckAllowed", "isComplete", "updateMethod", "isCompleteAuto", "isCompleteManual", "isManaualOverride", "tooltips", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        isCompleteManual: typing.Union[MetaOapg.properties.isCompleteManual, bool, ],
        isCompleteAuto: typing.Union[MetaOapg.properties.isCompleteAuto, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        isManualCheckAllowed: typing.Union[MetaOapg.properties.isManualCheckAllowed, bool, ],
        isManaualOverride: typing.Union[MetaOapg.properties.isManaualOverride, bool, ],
        tooltips: typing.Union[MetaOapg.properties.tooltips, list, tuple, ],
        isComplete: typing.Union[MetaOapg.properties.isComplete, bool, ],
        updateMethod: typing.Union[MetaOapg.properties.updateMethod, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RacetrackBuidPitstopAction':
        return super().__new__(
            cls,
            *_args,
            isCompleteManual=isCompleteManual,
            isCompleteAuto=isCompleteAuto,
            name=name,
            description=description,
            isManualCheckAllowed=isManualCheckAllowed,
            isManaualOverride=isManaualOverride,
            tooltips=tooltips,
            isComplete=isComplete,
            updateMethod=updateMethod,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.racetrack_tooltip import RacetrackTooltip
