# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class AssetsViolations(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            assetId = schemas.StrSchema
            assetName = schemas.StrSchema
            ipAddress = schemas.StrSchema
            softwareType = schemas.StrSchema
            softwareRelease = schemas.StrSchema
            productFamily = schemas.StrSchema
            productId = schemas.StrSchema
            severity = schemas.StrSchema
            lastChecked = schemas.StrSchema
            scanStatus = schemas.BoolSchema
            violationCount = schemas.Int64Schema
            mgmtSystemHostname = schemas.StrSchema
            role = schemas.StrSchema
            mgmtSystemType = schemas.StrSchema
            __annotations__ = {
                "assetId": assetId,
                "assetName": assetName,
                "ipAddress": ipAddress,
                "softwareType": softwareType,
                "softwareRelease": softwareRelease,
                "productFamily": productFamily,
                "productId": productId,
                "severity": severity,
                "lastChecked": lastChecked,
                "scanStatus": scanStatus,
                "violationCount": violationCount,
                "mgmtSystemHostname": mgmtSystemHostname,
                "role": role,
                "mgmtSystemType": mgmtSystemType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetName"]) -> MetaOapg.properties.assetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareType"]) -> MetaOapg.properties.softwareType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareRelease"]) -> MetaOapg.properties.softwareRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productFamily"]) -> MetaOapg.properties.productFamily: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productId"]) -> MetaOapg.properties.productId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastChecked"]) -> MetaOapg.properties.lastChecked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanStatus"]) -> MetaOapg.properties.scanStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["violationCount"]) -> MetaOapg.properties.violationCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemHostname"]) -> MetaOapg.properties.mgmtSystemHostname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemType"]) -> MetaOapg.properties.mgmtSystemType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetId", "assetName", "ipAddress", "softwareType", "softwareRelease", "productFamily", "productId", "severity", "lastChecked", "scanStatus", "violationCount", "mgmtSystemHostname", "role", "mgmtSystemType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetName"]) -> typing.Union[MetaOapg.properties.assetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareType"]) -> typing.Union[MetaOapg.properties.softwareType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareRelease"]) -> typing.Union[MetaOapg.properties.softwareRelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productFamily"]) -> typing.Union[MetaOapg.properties.productFamily, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productId"]) -> typing.Union[MetaOapg.properties.productId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastChecked"]) -> typing.Union[MetaOapg.properties.lastChecked, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanStatus"]) -> typing.Union[MetaOapg.properties.scanStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["violationCount"]) -> typing.Union[MetaOapg.properties.violationCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemHostname"]) -> typing.Union[MetaOapg.properties.mgmtSystemHostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> typing.Union[MetaOapg.properties.role, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemType"]) -> typing.Union[MetaOapg.properties.mgmtSystemType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetId", "assetName", "ipAddress", "softwareType", "softwareRelease", "productFamily", "productId", "severity", "lastChecked", "scanStatus", "violationCount", "mgmtSystemHostname", "role", "mgmtSystemType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        assetName: typing.Union[MetaOapg.properties.assetName, str, schemas.Unset] = schemas.unset,
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, schemas.Unset] = schemas.unset,
        softwareType: typing.Union[MetaOapg.properties.softwareType, str, schemas.Unset] = schemas.unset,
        softwareRelease: typing.Union[MetaOapg.properties.softwareRelease, str, schemas.Unset] = schemas.unset,
        productFamily: typing.Union[MetaOapg.properties.productFamily, str, schemas.Unset] = schemas.unset,
        productId: typing.Union[MetaOapg.properties.productId, str, schemas.Unset] = schemas.unset,
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        lastChecked: typing.Union[MetaOapg.properties.lastChecked, str, schemas.Unset] = schemas.unset,
        scanStatus: typing.Union[MetaOapg.properties.scanStatus, bool, schemas.Unset] = schemas.unset,
        violationCount: typing.Union[MetaOapg.properties.violationCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mgmtSystemHostname: typing.Union[MetaOapg.properties.mgmtSystemHostname, str, schemas.Unset] = schemas.unset,
        role: typing.Union[MetaOapg.properties.role, str, schemas.Unset] = schemas.unset,
        mgmtSystemType: typing.Union[MetaOapg.properties.mgmtSystemType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssetsViolations':
        return super().__new__(
            cls,
            *_args,
            assetId=assetId,
            assetName=assetName,
            ipAddress=ipAddress,
            softwareType=softwareType,
            softwareRelease=softwareRelease,
            productFamily=productFamily,
            productId=productId,
            severity=severity,
            lastChecked=lastChecked,
            scanStatus=scanStatus,
            violationCount=violationCount,
            mgmtSystemHostname=mgmtSystemHostname,
            role=role,
            mgmtSystemType=mgmtSystemType,
            _configuration=_configuration,
            **kwargs,
        )
