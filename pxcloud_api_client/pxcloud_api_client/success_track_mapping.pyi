# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class SuccessTrackMapping(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class checklists(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SuccessTrackChecklistMapping']:
                        return SuccessTrackChecklistMapping
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SuccessTrackChecklistMapping'], typing.List['SuccessTrackChecklistMapping']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'checklists':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SuccessTrackChecklistMapping':
                    return super().__getitem__(i)
            mappingId = schemas.StrSchema
            pitstop = schemas.StrSchema
            pitstopId = schemas.StrSchema
            successTrackId = schemas.StrSchema
            successTrackName = schemas.StrSchema
            usecase = schemas.StrSchema
            usecaseId = schemas.StrSchema
            __annotations__ = {
                "checklists": checklists,
                "mappingId": mappingId,
                "pitstop": pitstop,
                "pitstopId": pitstopId,
                "successTrackId": successTrackId,
                "successTrackName": successTrackName,
                "usecase": usecase,
                "usecaseId": usecaseId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checklists"]) -> MetaOapg.properties.checklists: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mappingId"]) -> MetaOapg.properties.mappingId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitstop"]) -> MetaOapg.properties.pitstop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitstopId"]) -> MetaOapg.properties.pitstopId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successTrackId"]) -> MetaOapg.properties.successTrackId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successTrackName"]) -> MetaOapg.properties.successTrackName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usecase"]) -> MetaOapg.properties.usecase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usecaseId"]) -> MetaOapg.properties.usecaseId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["checklists", "mappingId", "pitstop", "pitstopId", "successTrackId", "successTrackName", "usecase", "usecaseId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checklists"]) -> typing.Union[MetaOapg.properties.checklists, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mappingId"]) -> typing.Union[MetaOapg.properties.mappingId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitstop"]) -> typing.Union[MetaOapg.properties.pitstop, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitstopId"]) -> typing.Union[MetaOapg.properties.pitstopId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successTrackId"]) -> typing.Union[MetaOapg.properties.successTrackId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successTrackName"]) -> typing.Union[MetaOapg.properties.successTrackName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usecase"]) -> typing.Union[MetaOapg.properties.usecase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usecaseId"]) -> typing.Union[MetaOapg.properties.usecaseId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["checklists", "mappingId", "pitstop", "pitstopId", "successTrackId", "successTrackName", "usecase", "usecaseId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        checklists: typing.Union[MetaOapg.properties.checklists, list, tuple, schemas.Unset] = schemas.unset,
        mappingId: typing.Union[MetaOapg.properties.mappingId, str, schemas.Unset] = schemas.unset,
        pitstop: typing.Union[MetaOapg.properties.pitstop, str, schemas.Unset] = schemas.unset,
        pitstopId: typing.Union[MetaOapg.properties.pitstopId, str, schemas.Unset] = schemas.unset,
        successTrackId: typing.Union[MetaOapg.properties.successTrackId, str, schemas.Unset] = schemas.unset,
        successTrackName: typing.Union[MetaOapg.properties.successTrackName, str, schemas.Unset] = schemas.unset,
        usecase: typing.Union[MetaOapg.properties.usecase, str, schemas.Unset] = schemas.unset,
        usecaseId: typing.Union[MetaOapg.properties.usecaseId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SuccessTrackMapping':
        return super().__new__(
            cls,
            *_args,
            checklists=checklists,
            mappingId=mappingId,
            pitstop=pitstop,
            pitstopId=pitstopId,
            successTrackId=successTrackId,
            successTrackName=successTrackName,
            usecase=usecase,
            usecaseId=usecaseId,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.success_track_checklist_mapping import SuccessTrackChecklistMapping
