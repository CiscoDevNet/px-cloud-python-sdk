# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class Suggestion(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            severity = schemas.StrSchema
            violationMessage = schemas.StrSchema
            suggestion = schemas.StrSchema
            affectedAssetsCount = schemas.Int64Schema
            __annotations__ = {
                "severity": severity,
                "violationMessage": violationMessage,
                "suggestion": suggestion,
                "affectedAssetsCount": affectedAssetsCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["severity"]) -> MetaOapg.properties.severity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["violationMessage"]) -> MetaOapg.properties.violationMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggestion"]) -> MetaOapg.properties.suggestion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["affectedAssetsCount"]) -> MetaOapg.properties.affectedAssetsCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["severity", "violationMessage", "suggestion", "affectedAssetsCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["severity"]) -> typing.Union[MetaOapg.properties.severity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["violationMessage"]) -> typing.Union[MetaOapg.properties.violationMessage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggestion"]) -> typing.Union[MetaOapg.properties.suggestion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["affectedAssetsCount"]) -> typing.Union[MetaOapg.properties.affectedAssetsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["severity", "violationMessage", "suggestion", "affectedAssetsCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        severity: typing.Union[MetaOapg.properties.severity, str, schemas.Unset] = schemas.unset,
        violationMessage: typing.Union[MetaOapg.properties.violationMessage, str, schemas.Unset] = schemas.unset,
        suggestion: typing.Union[MetaOapg.properties.suggestion, str, schemas.Unset] = schemas.unset,
        affectedAssetsCount: typing.Union[MetaOapg.properties.affectedAssetsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Suggestion':
        return super().__new__(
            cls,
            *_args,
            severity=severity,
            violationMessage=violationMessage,
            suggestion=suggestion,
            affectedAssetsCount=affectedAssetsCount,
            _configuration=_configuration,
            **kwargs,
        )
