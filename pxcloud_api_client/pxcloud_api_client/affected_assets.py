# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class AffectedAssets(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            assetName = schemas.StrSchema
            productId = schemas.StrSchema
            caseNumber = schemas.StrSchema
            caseAction = schemas.StrSchema
            occurrences = schemas.IntSchema
            firstOccurrence = schemas.DateTimeSchema
            lastOccurrence = schemas.DateTimeSchema
            faultId = schemas.IntSchema
            serialNumber = schemas.StrSchema
            mgmtSystemType = schemas.StrSchema
            mgmtSystemAddr = schemas.StrSchema
            mgmtSystemHostname = schemas.StrSchema
            __annotations__ = {
                "assetName": assetName,
                "productId": productId,
                "caseNumber": caseNumber,
                "caseAction": caseAction,
                "occurrences": occurrences,
                "firstOccurrence": firstOccurrence,
                "lastOccurrence": lastOccurrence,
                "faultId": faultId,
                "serialNumber": serialNumber,
                "mgmtSystemType": mgmtSystemType,
                "mgmtSystemAddr": mgmtSystemAddr,
                "mgmtSystemHostname": mgmtSystemHostname,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetName"]) -> MetaOapg.properties.assetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productId"]) -> MetaOapg.properties.productId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseNumber"]) -> MetaOapg.properties.caseNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caseAction"]) -> MetaOapg.properties.caseAction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["occurrences"]) -> MetaOapg.properties.occurrences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstOccurrence"]) -> MetaOapg.properties.firstOccurrence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastOccurrence"]) -> MetaOapg.properties.lastOccurrence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["faultId"]) -> MetaOapg.properties.faultId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serialNumber"]) -> MetaOapg.properties.serialNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemType"]) -> MetaOapg.properties.mgmtSystemType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemAddr"]) -> MetaOapg.properties.mgmtSystemAddr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemHostname"]) -> MetaOapg.properties.mgmtSystemHostname: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assetName", "productId", "caseNumber", "caseAction", "occurrences", "firstOccurrence", "lastOccurrence", "faultId", "serialNumber", "mgmtSystemType", "mgmtSystemAddr", "mgmtSystemHostname", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetName"]) -> typing.Union[MetaOapg.properties.assetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productId"]) -> typing.Union[MetaOapg.properties.productId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseNumber"]) -> typing.Union[MetaOapg.properties.caseNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caseAction"]) -> typing.Union[MetaOapg.properties.caseAction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["occurrences"]) -> typing.Union[MetaOapg.properties.occurrences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstOccurrence"]) -> typing.Union[MetaOapg.properties.firstOccurrence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastOccurrence"]) -> typing.Union[MetaOapg.properties.lastOccurrence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["faultId"]) -> typing.Union[MetaOapg.properties.faultId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serialNumber"]) -> typing.Union[MetaOapg.properties.serialNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemType"]) -> typing.Union[MetaOapg.properties.mgmtSystemType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemAddr"]) -> typing.Union[MetaOapg.properties.mgmtSystemAddr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemHostname"]) -> typing.Union[MetaOapg.properties.mgmtSystemHostname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assetName", "productId", "caseNumber", "caseAction", "occurrences", "firstOccurrence", "lastOccurrence", "faultId", "serialNumber", "mgmtSystemType", "mgmtSystemAddr", "mgmtSystemHostname", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        assetName: typing.Union[MetaOapg.properties.assetName, str, schemas.Unset] = schemas.unset,
        productId: typing.Union[MetaOapg.properties.productId, str, schemas.Unset] = schemas.unset,
        caseNumber: typing.Union[MetaOapg.properties.caseNumber, str, schemas.Unset] = schemas.unset,
        caseAction: typing.Union[MetaOapg.properties.caseAction, str, schemas.Unset] = schemas.unset,
        occurrences: typing.Union[MetaOapg.properties.occurrences, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstOccurrence: typing.Union[MetaOapg.properties.firstOccurrence, str, datetime, schemas.Unset] = schemas.unset,
        lastOccurrence: typing.Union[MetaOapg.properties.lastOccurrence, str, datetime, schemas.Unset] = schemas.unset,
        faultId: typing.Union[MetaOapg.properties.faultId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serialNumber: typing.Union[MetaOapg.properties.serialNumber, str, schemas.Unset] = schemas.unset,
        mgmtSystemType: typing.Union[MetaOapg.properties.mgmtSystemType, str, schemas.Unset] = schemas.unset,
        mgmtSystemAddr: typing.Union[MetaOapg.properties.mgmtSystemAddr, str, schemas.Unset] = schemas.unset,
        mgmtSystemHostname: typing.Union[MetaOapg.properties.mgmtSystemHostname, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AffectedAssets':
        return super().__new__(
            cls,
            *_args,
            assetName=assetName,
            productId=productId,
            caseNumber=caseNumber,
            caseAction=caseAction,
            occurrences=occurrences,
            firstOccurrence=firstOccurrence,
            lastOccurrence=lastOccurrence,
            faultId=faultId,
            serialNumber=serialNumber,
            mgmtSystemType=mgmtSystemType,
            mgmtSystemAddr=mgmtSystemAddr,
            mgmtSystemHostname=mgmtSystemHostname,
            _configuration=_configuration,
            **kwargs,
        )
