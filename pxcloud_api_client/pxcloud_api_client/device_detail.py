# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class DeviceDetail(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            crashCount = schemas.Int64Schema
            firstCrashDate = schemas.DateTimeSchema
            ipAddress = schemas.StrSchema
            lastCrashDate = schemas.DateTimeSchema
            assetId = schemas.StrSchema
            assetUniqueId = schemas.StrSchema
            assetName = schemas.StrSchema
            productFamily = schemas.StrSchema
            productId = schemas.StrSchema
            serialNumber = schemas.StrSchema
            softwareType = schemas.StrSchema
            softwareRelease = schemas.StrSchema
            mgmtSystemAddr = schemas.StrSchema
            mgmtSystemHost = schemas.StrSchema
            mgmtSytemType = schemas.StrSchema
            __annotations__ = {
                "crashCount": crashCount,
                "firstCrashDate": firstCrashDate,
                "ipAddress": ipAddress,
                "lastCrashDate": lastCrashDate,
                "assetId": assetId,
                "assetUniqueId": assetUniqueId,
                "assetName": assetName,
                "productFamily": productFamily,
                "productId": productId,
                "serialNumber": serialNumber,
                "softwareType": softwareType,
                "softwareRelease": softwareRelease,
                "mgmtSystemAddr": mgmtSystemAddr,
                "mgmtSystemHost": mgmtSystemHost,
                "mgmtSytemType": mgmtSytemType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["crashCount"]) -> MetaOapg.properties.crashCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstCrashDate"]) -> MetaOapg.properties.firstCrashDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastCrashDate"]) -> MetaOapg.properties.lastCrashDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetUniqueId"]) -> MetaOapg.properties.assetUniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetName"]) -> MetaOapg.properties.assetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productFamily"]) -> MetaOapg.properties.productFamily: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productId"]) -> MetaOapg.properties.productId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serialNumber"]) -> MetaOapg.properties.serialNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareType"]) -> MetaOapg.properties.softwareType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareRelease"]) -> MetaOapg.properties.softwareRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemAddr"]) -> MetaOapg.properties.mgmtSystemAddr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSystemHost"]) -> MetaOapg.properties.mgmtSystemHost: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mgmtSytemType"]) -> MetaOapg.properties.mgmtSytemType: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["crashCount", "firstCrashDate", "ipAddress", "lastCrashDate", "assetId", "assetUniqueId", "assetName", "productFamily", "productId", "serialNumber", "softwareType", "softwareRelease", "mgmtSystemAddr", "mgmtSystemHost", "mgmtSytemType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["crashCount"]) -> typing.Union[MetaOapg.properties.crashCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstCrashDate"]) -> typing.Union[MetaOapg.properties.firstCrashDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastCrashDate"]) -> typing.Union[MetaOapg.properties.lastCrashDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetUniqueId"]) -> typing.Union[MetaOapg.properties.assetUniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetName"]) -> typing.Union[MetaOapg.properties.assetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productFamily"]) -> typing.Union[MetaOapg.properties.productFamily, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productId"]) -> typing.Union[MetaOapg.properties.productId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serialNumber"]) -> typing.Union[MetaOapg.properties.serialNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareType"]) -> typing.Union[MetaOapg.properties.softwareType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareRelease"]) -> typing.Union[MetaOapg.properties.softwareRelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemAddr"]) -> typing.Union[MetaOapg.properties.mgmtSystemAddr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSystemHost"]) -> typing.Union[MetaOapg.properties.mgmtSystemHost, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mgmtSytemType"]) -> typing.Union[MetaOapg.properties.mgmtSytemType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["crashCount", "firstCrashDate", "ipAddress", "lastCrashDate", "assetId", "assetUniqueId", "assetName", "productFamily", "productId", "serialNumber", "softwareType", "softwareRelease", "mgmtSystemAddr", "mgmtSystemHost", "mgmtSytemType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        crashCount: typing.Union[MetaOapg.properties.crashCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        firstCrashDate: typing.Union[MetaOapg.properties.firstCrashDate, str, datetime, schemas.Unset] = schemas.unset,
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, schemas.Unset] = schemas.unset,
        lastCrashDate: typing.Union[MetaOapg.properties.lastCrashDate, str, datetime, schemas.Unset] = schemas.unset,
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        assetUniqueId: typing.Union[MetaOapg.properties.assetUniqueId, str, schemas.Unset] = schemas.unset,
        assetName: typing.Union[MetaOapg.properties.assetName, str, schemas.Unset] = schemas.unset,
        productFamily: typing.Union[MetaOapg.properties.productFamily, str, schemas.Unset] = schemas.unset,
        productId: typing.Union[MetaOapg.properties.productId, str, schemas.Unset] = schemas.unset,
        serialNumber: typing.Union[MetaOapg.properties.serialNumber, str, schemas.Unset] = schemas.unset,
        softwareType: typing.Union[MetaOapg.properties.softwareType, str, schemas.Unset] = schemas.unset,
        softwareRelease: typing.Union[MetaOapg.properties.softwareRelease, str, schemas.Unset] = schemas.unset,
        mgmtSystemAddr: typing.Union[MetaOapg.properties.mgmtSystemAddr, str, schemas.Unset] = schemas.unset,
        mgmtSystemHost: typing.Union[MetaOapg.properties.mgmtSystemHost, str, schemas.Unset] = schemas.unset,
        mgmtSytemType: typing.Union[MetaOapg.properties.mgmtSytemType, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeviceDetail':
        return super().__new__(
            cls,
            *_args,
            crashCount=crashCount,
            firstCrashDate=firstCrashDate,
            ipAddress=ipAddress,
            lastCrashDate=lastCrashDate,
            assetId=assetId,
            assetUniqueId=assetUniqueId,
            assetName=assetName,
            productFamily=productFamily,
            productId=productId,
            serialNumber=serialNumber,
            softwareType=softwareType,
            softwareRelease=softwareRelease,
            mgmtSystemAddr=mgmtSystemAddr,
            mgmtSystemHost=mgmtSystemHost,
            mgmtSytemType=mgmtSytemType,
            _configuration=_configuration,
            **kwargs,
        )
