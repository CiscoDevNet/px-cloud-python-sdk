# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class Contract(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            contractNumber = schemas.StrSchema
            cuid = schemas.Int64Schema
            cavid = schemas.Int64Schema
            contractStatus = schemas.StrSchema
            contractValue = schemas.Int64Schema
            customerGUName = schemas.StrSchema
            customerName = schemas.StrSchema
            currency = schemas.StrSchema
            serviceLevel = schemas.StrSchema
            serviceProgram = schemas.StrSchema
            startDate = schemas.StrSchema
            endDate = schemas.StrSchema
            currencySymbol = schemas.StrSchema
            onboardedstatus = schemas.Int64Schema
            __annotations__ = {
                "contractNumber": contractNumber,
                "cuid": cuid,
                "cavid": cavid,
                "contractStatus": contractStatus,
                "contractValue": contractValue,
                "customerGUName": customerGUName,
                "customerName": customerName,
                "currency": currency,
                "serviceLevel": serviceLevel,
                "serviceProgram": serviceProgram,
                "startDate": startDate,
                "endDate": endDate,
                "currencySymbol": currencySymbol,
                "onboardedstatus": onboardedstatus,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractNumber"]) -> MetaOapg.properties.contractNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cuid"]) -> MetaOapg.properties.cuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cavid"]) -> MetaOapg.properties.cavid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractStatus"]) -> MetaOapg.properties.contractStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractValue"]) -> MetaOapg.properties.contractValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerGUName"]) -> MetaOapg.properties.customerGUName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerName"]) -> MetaOapg.properties.customerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceLevel"]) -> MetaOapg.properties.serviceLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceProgram"]) -> MetaOapg.properties.serviceProgram: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencySymbol"]) -> MetaOapg.properties.currencySymbol: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onboardedstatus"]) -> MetaOapg.properties.onboardedstatus: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contractNumber", "cuid", "cavid", "contractStatus", "contractValue", "customerGUName", "customerName", "currency", "serviceLevel", "serviceProgram", "startDate", "endDate", "currencySymbol", "onboardedstatus", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractNumber"]) -> typing.Union[MetaOapg.properties.contractNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cuid"]) -> typing.Union[MetaOapg.properties.cuid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cavid"]) -> typing.Union[MetaOapg.properties.cavid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractStatus"]) -> typing.Union[MetaOapg.properties.contractStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractValue"]) -> typing.Union[MetaOapg.properties.contractValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerGUName"]) -> typing.Union[MetaOapg.properties.customerGUName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerName"]) -> typing.Union[MetaOapg.properties.customerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceLevel"]) -> typing.Union[MetaOapg.properties.serviceLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceProgram"]) -> typing.Union[MetaOapg.properties.serviceProgram, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencySymbol"]) -> typing.Union[MetaOapg.properties.currencySymbol, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onboardedstatus"]) -> typing.Union[MetaOapg.properties.onboardedstatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contractNumber", "cuid", "cavid", "contractStatus", "contractValue", "customerGUName", "customerName", "currency", "serviceLevel", "serviceProgram", "startDate", "endDate", "currencySymbol", "onboardedstatus", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        contractNumber: typing.Union[MetaOapg.properties.contractNumber, str, schemas.Unset] = schemas.unset,
        cuid: typing.Union[MetaOapg.properties.cuid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cavid: typing.Union[MetaOapg.properties.cavid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contractStatus: typing.Union[MetaOapg.properties.contractStatus, str, schemas.Unset] = schemas.unset,
        contractValue: typing.Union[MetaOapg.properties.contractValue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customerGUName: typing.Union[MetaOapg.properties.customerGUName, str, schemas.Unset] = schemas.unset,
        customerName: typing.Union[MetaOapg.properties.customerName, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        serviceLevel: typing.Union[MetaOapg.properties.serviceLevel, str, schemas.Unset] = schemas.unset,
        serviceProgram: typing.Union[MetaOapg.properties.serviceProgram, str, schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, str, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, str, schemas.Unset] = schemas.unset,
        currencySymbol: typing.Union[MetaOapg.properties.currencySymbol, str, schemas.Unset] = schemas.unset,
        onboardedstatus: typing.Union[MetaOapg.properties.onboardedstatus, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Contract':
        return super().__new__(
            cls,
            *_args,
            contractNumber=contractNumber,
            cuid=cuid,
            cavid=cavid,
            contractStatus=contractStatus,
            contractValue=contractValue,
            customerGUName=customerGUName,
            customerName=customerName,
            currency=currency,
            serviceLevel=serviceLevel,
            serviceProgram=serviceProgram,
            startDate=startDate,
            endDate=endDate,
            currencySymbol=currencySymbol,
            onboardedstatus=onboardedstatus,
            _configuration=_configuration,
            **kwargs,
        )
