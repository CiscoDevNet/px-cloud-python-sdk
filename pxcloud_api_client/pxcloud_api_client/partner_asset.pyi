# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class PartnerAsset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            additionalInfo = schemas.StrSchema
            assetId = schemas.StrSchema
            assetType = schemas.StrSchema
            complies = schemas.BoolSchema
            createdBy = schemas.StrSchema
            
            
            class customer(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'customer':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            customerRating = schemas.Float64Schema
            description = schemas.StrSchema
            duration = schemas.Int64Schema
            imageFileName = schemas.StrSchema
            imageUrl = schemas.StrSchema
            lastUpdated = schemas.DateTimeSchema
            
            
            class mapping(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SolutionMapping']:
                        return SolutionMapping
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SolutionMapping'], typing.List['SolutionMapping']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mapping':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SolutionMapping':
                    return super().__getitem__(i)
            partnerId = schemas.StrSchema
            partnerName = schemas.StrSchema
            partnerUserEmailId = schemas.StrSchema
            partnerUserFirstName = schemas.StrSchema
            partnerUserLastName = schemas.StrSchema
            pitstops = schemas.StrSchema
            recordingUrl = schemas.StrSchema
            
            
            class sessions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AssetSession']:
                        return AssetSession
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AssetSession'], typing.List['AssetSession']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sessions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AssetSession':
                    return super().__getitem__(i)
            solutions = schemas.StrSchema
            status = schemas.StrSchema
            technologyArea = schemas.StrSchema
            title = schemas.StrSchema
            usecases = schemas.StrSchema
            __annotations__ = {
                "additionalInfo": additionalInfo,
                "assetId": assetId,
                "assetType": assetType,
                "complies": complies,
                "createdBy": createdBy,
                "customer": customer,
                "customerRating": customerRating,
                "description": description,
                "duration": duration,
                "imageFileName": imageFileName,
                "imageUrl": imageUrl,
                "lastUpdated": lastUpdated,
                "mapping": mapping,
                "partnerId": partnerId,
                "partnerName": partnerName,
                "partnerUserEmailId": partnerUserEmailId,
                "partnerUserFirstName": partnerUserFirstName,
                "partnerUserLastName": partnerUserLastName,
                "pitstops": pitstops,
                "recordingUrl": recordingUrl,
                "sessions": sessions,
                "solutions": solutions,
                "status": status,
                "technologyArea": technologyArea,
                "title": title,
                "usecases": usecases,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalInfo"]) -> MetaOapg.properties.additionalInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetId"]) -> MetaOapg.properties.assetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetType"]) -> MetaOapg.properties.assetType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complies"]) -> MetaOapg.properties.complies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customer"]) -> MetaOapg.properties.customer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerRating"]) -> MetaOapg.properties.customerRating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageFileName"]) -> MetaOapg.properties.imageFileName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imageUrl"]) -> MetaOapg.properties.imageUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUpdated"]) -> MetaOapg.properties.lastUpdated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mapping"]) -> MetaOapg.properties.mapping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerId"]) -> MetaOapg.properties.partnerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerName"]) -> MetaOapg.properties.partnerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerUserEmailId"]) -> MetaOapg.properties.partnerUserEmailId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerUserFirstName"]) -> MetaOapg.properties.partnerUserFirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["partnerUserLastName"]) -> MetaOapg.properties.partnerUserLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitstops"]) -> MetaOapg.properties.pitstops: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recordingUrl"]) -> MetaOapg.properties.recordingUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessions"]) -> MetaOapg.properties.sessions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["solutions"]) -> MetaOapg.properties.solutions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["technologyArea"]) -> MetaOapg.properties.technologyArea: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usecases"]) -> MetaOapg.properties.usecases: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["additionalInfo", "assetId", "assetType", "complies", "createdBy", "customer", "customerRating", "description", "duration", "imageFileName", "imageUrl", "lastUpdated", "mapping", "partnerId", "partnerName", "partnerUserEmailId", "partnerUserFirstName", "partnerUserLastName", "pitstops", "recordingUrl", "sessions", "solutions", "status", "technologyArea", "title", "usecases", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalInfo"]) -> typing.Union[MetaOapg.properties.additionalInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetId"]) -> typing.Union[MetaOapg.properties.assetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetType"]) -> typing.Union[MetaOapg.properties.assetType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complies"]) -> typing.Union[MetaOapg.properties.complies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customer"]) -> typing.Union[MetaOapg.properties.customer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerRating"]) -> typing.Union[MetaOapg.properties.customerRating, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageFileName"]) -> typing.Union[MetaOapg.properties.imageFileName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imageUrl"]) -> typing.Union[MetaOapg.properties.imageUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUpdated"]) -> typing.Union[MetaOapg.properties.lastUpdated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mapping"]) -> typing.Union[MetaOapg.properties.mapping, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerId"]) -> typing.Union[MetaOapg.properties.partnerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerName"]) -> typing.Union[MetaOapg.properties.partnerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerUserEmailId"]) -> typing.Union[MetaOapg.properties.partnerUserEmailId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerUserFirstName"]) -> typing.Union[MetaOapg.properties.partnerUserFirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["partnerUserLastName"]) -> typing.Union[MetaOapg.properties.partnerUserLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitstops"]) -> typing.Union[MetaOapg.properties.pitstops, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recordingUrl"]) -> typing.Union[MetaOapg.properties.recordingUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessions"]) -> typing.Union[MetaOapg.properties.sessions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["solutions"]) -> typing.Union[MetaOapg.properties.solutions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["technologyArea"]) -> typing.Union[MetaOapg.properties.technologyArea, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usecases"]) -> typing.Union[MetaOapg.properties.usecases, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["additionalInfo", "assetId", "assetType", "complies", "createdBy", "customer", "customerRating", "description", "duration", "imageFileName", "imageUrl", "lastUpdated", "mapping", "partnerId", "partnerName", "partnerUserEmailId", "partnerUserFirstName", "partnerUserLastName", "pitstops", "recordingUrl", "sessions", "solutions", "status", "technologyArea", "title", "usecases", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        additionalInfo: typing.Union[MetaOapg.properties.additionalInfo, str, schemas.Unset] = schemas.unset,
        assetId: typing.Union[MetaOapg.properties.assetId, str, schemas.Unset] = schemas.unset,
        assetType: typing.Union[MetaOapg.properties.assetType, str, schemas.Unset] = schemas.unset,
        complies: typing.Union[MetaOapg.properties.complies, bool, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        customer: typing.Union[MetaOapg.properties.customer, list, tuple, schemas.Unset] = schemas.unset,
        customerRating: typing.Union[MetaOapg.properties.customerRating, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        imageFileName: typing.Union[MetaOapg.properties.imageFileName, str, schemas.Unset] = schemas.unset,
        imageUrl: typing.Union[MetaOapg.properties.imageUrl, str, schemas.Unset] = schemas.unset,
        lastUpdated: typing.Union[MetaOapg.properties.lastUpdated, str, datetime, schemas.Unset] = schemas.unset,
        mapping: typing.Union[MetaOapg.properties.mapping, list, tuple, schemas.Unset] = schemas.unset,
        partnerId: typing.Union[MetaOapg.properties.partnerId, str, schemas.Unset] = schemas.unset,
        partnerName: typing.Union[MetaOapg.properties.partnerName, str, schemas.Unset] = schemas.unset,
        partnerUserEmailId: typing.Union[MetaOapg.properties.partnerUserEmailId, str, schemas.Unset] = schemas.unset,
        partnerUserFirstName: typing.Union[MetaOapg.properties.partnerUserFirstName, str, schemas.Unset] = schemas.unset,
        partnerUserLastName: typing.Union[MetaOapg.properties.partnerUserLastName, str, schemas.Unset] = schemas.unset,
        pitstops: typing.Union[MetaOapg.properties.pitstops, str, schemas.Unset] = schemas.unset,
        recordingUrl: typing.Union[MetaOapg.properties.recordingUrl, str, schemas.Unset] = schemas.unset,
        sessions: typing.Union[MetaOapg.properties.sessions, list, tuple, schemas.Unset] = schemas.unset,
        solutions: typing.Union[MetaOapg.properties.solutions, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        technologyArea: typing.Union[MetaOapg.properties.technologyArea, str, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        usecases: typing.Union[MetaOapg.properties.usecases, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartnerAsset':
        return super().__new__(
            cls,
            *_args,
            additionalInfo=additionalInfo,
            assetId=assetId,
            assetType=assetType,
            complies=complies,
            createdBy=createdBy,
            customer=customer,
            customerRating=customerRating,
            description=description,
            duration=duration,
            imageFileName=imageFileName,
            imageUrl=imageUrl,
            lastUpdated=lastUpdated,
            mapping=mapping,
            partnerId=partnerId,
            partnerName=partnerName,
            partnerUserEmailId=partnerUserEmailId,
            partnerUserFirstName=partnerUserFirstName,
            partnerUserLastName=partnerUserLastName,
            pitstops=pitstops,
            recordingUrl=recordingUrl,
            sessions=sessions,
            solutions=solutions,
            status=status,
            technologyArea=technologyArea,
            title=title,
            usecases=usecases,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.asset_session import AssetSession
from pxcloud_api_client.pxcloud_api_client.solution_mapping import SolutionMapping
