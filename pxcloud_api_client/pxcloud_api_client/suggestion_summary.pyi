# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class SuggestionSummary(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            expectedSoftwareGroupRisk = schemas.StrSchema
            expectedSoftwareGroupRiskCategory = schemas.StrSchema
            machineSuggestionId = schemas.StrSchema
            name = schemas.StrSchema
            releaseDate = schemas.DateTimeSchema
            release = schemas.StrSchema
            releaseNotesUrl = schemas.StrSchema
            
            
            class bugSeverity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class Exposed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Medium": Medium,
                                        "Low": Low,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Medium", "Low", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Medium", "Low", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'Exposed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Medium=Medium,
                                    Low=Low,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class New_Exposed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Low": Low,
                                        "Medium": Medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'New_Exposed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Low=Low,
                                    Medium=Medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class Fixed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Low": Low,
                                        "Medium": Medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'Fixed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Low=Low,
                                    Medium=Medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "Exposed": Exposed,
                            "New_Exposed": New_Exposed,
                            "Fixed": Fixed,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Exposed"]) -> MetaOapg.properties.Exposed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["New_Exposed"]) -> MetaOapg.properties.New_Exposed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Fixed"]) -> MetaOapg.properties.Fixed: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Exposed", "New_Exposed", "Fixed", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Exposed"]) -> typing.Union[MetaOapg.properties.Exposed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["New_Exposed"]) -> typing.Union[MetaOapg.properties.New_Exposed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Fixed"]) -> typing.Union[MetaOapg.properties.Fixed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Exposed", "New_Exposed", "Fixed", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Exposed: typing.Union[MetaOapg.properties.Exposed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    New_Exposed: typing.Union[MetaOapg.properties.New_Exposed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    Fixed: typing.Union[MetaOapg.properties.Fixed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'bugSeverity':
                    return super().__new__(
                        cls,
                        *_args,
                        Exposed=Exposed,
                        New_Exposed=New_Exposed,
                        Fixed=Fixed,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class advisoriesSeverity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class Exposed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Low": Low,
                                        "Medium": Medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'Exposed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Low=Low,
                                    Medium=Medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class New_Exposed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    high = schemas.Int64Schema
                                    low = schemas.Int64Schema
                                    medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "high": high,
                                        "low": low,
                                        "medium": medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["high"]) -> MetaOapg.properties.high: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["low"]) -> MetaOapg.properties.low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["medium"]) -> MetaOapg.properties.medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["high", "low", "medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["high"]) -> typing.Union[MetaOapg.properties.high, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["low"]) -> typing.Union[MetaOapg.properties.low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["medium"]) -> typing.Union[MetaOapg.properties.medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["high", "low", "medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                high: typing.Union[MetaOapg.properties.high, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                low: typing.Union[MetaOapg.properties.low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                medium: typing.Union[MetaOapg.properties.medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'New_Exposed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    high=high,
                                    low=low,
                                    medium=medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class Fixed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    high = schemas.Int64Schema
                                    low = schemas.Int64Schema
                                    medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "high": high,
                                        "low": low,
                                        "medium": medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["high"]) -> MetaOapg.properties.high: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["low"]) -> MetaOapg.properties.low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["medium"]) -> MetaOapg.properties.medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["high", "low", "medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["high"]) -> typing.Union[MetaOapg.properties.high, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["low"]) -> typing.Union[MetaOapg.properties.low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["medium"]) -> typing.Union[MetaOapg.properties.medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["high", "low", "medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                high: typing.Union[MetaOapg.properties.high, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                low: typing.Union[MetaOapg.properties.low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                medium: typing.Union[MetaOapg.properties.medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'Fixed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    high=high,
                                    low=low,
                                    medium=medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "Exposed": Exposed,
                            "New_Exposed": New_Exposed,
                            "Fixed": Fixed,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Exposed"]) -> MetaOapg.properties.Exposed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["New_Exposed"]) -> MetaOapg.properties.New_Exposed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Fixed"]) -> MetaOapg.properties.Fixed: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Exposed", "New_Exposed", "Fixed", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Exposed"]) -> typing.Union[MetaOapg.properties.Exposed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["New_Exposed"]) -> typing.Union[MetaOapg.properties.New_Exposed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Fixed"]) -> typing.Union[MetaOapg.properties.Fixed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Exposed", "New_Exposed", "Fixed", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Exposed: typing.Union[MetaOapg.properties.Exposed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    New_Exposed: typing.Union[MetaOapg.properties.New_Exposed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    Fixed: typing.Union[MetaOapg.properties.Fixed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'advisoriesSeverity':
                    return super().__new__(
                        cls,
                        *_args,
                        Exposed=Exposed,
                        New_Exposed=New_Exposed,
                        Fixed=Fixed,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class fieldNoticeSeverity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class Exposed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Low": Low,
                                        "Medium": Medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'Exposed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Low=Low,
                                    Medium=Medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class New_Exposed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Low": Low,
                                        "Medium": Medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'New_Exposed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Low=Low,
                                    Medium=Medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class Fixed(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                    High = schemas.Int64Schema
                                    Low = schemas.Int64Schema
                                    Medium = schemas.Int64Schema
                                    __annotations__ = {
                                        "High": High,
                                        "Low": Low,
                                        "Medium": Medium,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["High"]) -> MetaOapg.properties.High: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Low"]) -> MetaOapg.properties.Low: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["Medium"]) -> MetaOapg.properties.Medium: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["High"]) -> typing.Union[MetaOapg.properties.High, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Low"]) -> typing.Union[MetaOapg.properties.Low, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["Medium"]) -> typing.Union[MetaOapg.properties.Medium, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["High", "Low", "Medium", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                High: typing.Union[MetaOapg.properties.High, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Low: typing.Union[MetaOapg.properties.Low, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                Medium: typing.Union[MetaOapg.properties.Medium, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'Fixed':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    High=High,
                                    Low=Low,
                                    Medium=Medium,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "Exposed": Exposed,
                            "New_Exposed": New_Exposed,
                            "Fixed": Fixed,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Exposed"]) -> MetaOapg.properties.Exposed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["New_Exposed"]) -> MetaOapg.properties.New_Exposed: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["Fixed"]) -> MetaOapg.properties.Fixed: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["Exposed", "New_Exposed", "Fixed", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Exposed"]) -> typing.Union[MetaOapg.properties.Exposed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["New_Exposed"]) -> typing.Union[MetaOapg.properties.New_Exposed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["Fixed"]) -> typing.Union[MetaOapg.properties.Fixed, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["Exposed", "New_Exposed", "Fixed", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    Exposed: typing.Union[MetaOapg.properties.Exposed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    New_Exposed: typing.Union[MetaOapg.properties.New_Exposed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    Fixed: typing.Union[MetaOapg.properties.Fixed, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'fieldNoticeSeverity':
                    return super().__new__(
                        cls,
                        *_args,
                        Exposed=Exposed,
                        New_Exposed=New_Exposed,
                        Fixed=Fixed,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class featuresCount(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        activeFeaturesCount = schemas.IntSchema
                        affectedFeaturesCount = schemas.IntSchema
                        fixedFeaturesCount = schemas.IntSchema
                        __annotations__ = {
                            "activeFeaturesCount": activeFeaturesCount,
                            "affectedFeaturesCount": affectedFeaturesCount,
                            "fixedFeaturesCount": fixedFeaturesCount,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["activeFeaturesCount"]) -> MetaOapg.properties.activeFeaturesCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["affectedFeaturesCount"]) -> MetaOapg.properties.affectedFeaturesCount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["fixedFeaturesCount"]) -> MetaOapg.properties.fixedFeaturesCount: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["activeFeaturesCount", "affectedFeaturesCount", "fixedFeaturesCount", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["activeFeaturesCount"]) -> typing.Union[MetaOapg.properties.activeFeaturesCount, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["affectedFeaturesCount"]) -> typing.Union[MetaOapg.properties.affectedFeaturesCount, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["fixedFeaturesCount"]) -> typing.Union[MetaOapg.properties.fixedFeaturesCount, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["activeFeaturesCount", "affectedFeaturesCount", "fixedFeaturesCount", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    activeFeaturesCount: typing.Union[MetaOapg.properties.activeFeaturesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    affectedFeaturesCount: typing.Union[MetaOapg.properties.affectedFeaturesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    fixedFeaturesCount: typing.Union[MetaOapg.properties.fixedFeaturesCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'featuresCount':
                    return super().__new__(
                        cls,
                        *_args,
                        activeFeaturesCount=activeFeaturesCount,
                        affectedFeaturesCount=affectedFeaturesCount,
                        fixedFeaturesCount=fixedFeaturesCount,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "expectedSoftwareGroupRisk": expectedSoftwareGroupRisk,
                "expectedSoftwareGroupRiskCategory": expectedSoftwareGroupRiskCategory,
                "machineSuggestionId": machineSuggestionId,
                "name": name,
                "releaseDate": releaseDate,
                "release": release,
                "releaseNotesUrl": releaseNotesUrl,
                "bugSeverity": bugSeverity,
                "advisoriesSeverity": advisoriesSeverity,
                "fieldNoticeSeverity": fieldNoticeSeverity,
                "featuresCount": featuresCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedSoftwareGroupRisk"]) -> MetaOapg.properties.expectedSoftwareGroupRisk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedSoftwareGroupRiskCategory"]) -> MetaOapg.properties.expectedSoftwareGroupRiskCategory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineSuggestionId"]) -> MetaOapg.properties.machineSuggestionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseDate"]) -> MetaOapg.properties.releaseDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release"]) -> MetaOapg.properties.release: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseNotesUrl"]) -> MetaOapg.properties.releaseNotesUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bugSeverity"]) -> MetaOapg.properties.bugSeverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["advisoriesSeverity"]) -> MetaOapg.properties.advisoriesSeverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldNoticeSeverity"]) -> MetaOapg.properties.fieldNoticeSeverity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featuresCount"]) -> MetaOapg.properties.featuresCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["expectedSoftwareGroupRisk", "expectedSoftwareGroupRiskCategory", "machineSuggestionId", "name", "releaseDate", "release", "releaseNotesUrl", "bugSeverity", "advisoriesSeverity", "fieldNoticeSeverity", "featuresCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedSoftwareGroupRisk"]) -> typing.Union[MetaOapg.properties.expectedSoftwareGroupRisk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedSoftwareGroupRiskCategory"]) -> typing.Union[MetaOapg.properties.expectedSoftwareGroupRiskCategory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineSuggestionId"]) -> typing.Union[MetaOapg.properties.machineSuggestionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseDate"]) -> typing.Union[MetaOapg.properties.releaseDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release"]) -> typing.Union[MetaOapg.properties.release, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseNotesUrl"]) -> typing.Union[MetaOapg.properties.releaseNotesUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bugSeverity"]) -> typing.Union[MetaOapg.properties.bugSeverity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["advisoriesSeverity"]) -> typing.Union[MetaOapg.properties.advisoriesSeverity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldNoticeSeverity"]) -> typing.Union[MetaOapg.properties.fieldNoticeSeverity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featuresCount"]) -> typing.Union[MetaOapg.properties.featuresCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["expectedSoftwareGroupRisk", "expectedSoftwareGroupRiskCategory", "machineSuggestionId", "name", "releaseDate", "release", "releaseNotesUrl", "bugSeverity", "advisoriesSeverity", "fieldNoticeSeverity", "featuresCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        expectedSoftwareGroupRisk: typing.Union[MetaOapg.properties.expectedSoftwareGroupRisk, str, schemas.Unset] = schemas.unset,
        expectedSoftwareGroupRiskCategory: typing.Union[MetaOapg.properties.expectedSoftwareGroupRiskCategory, str, schemas.Unset] = schemas.unset,
        machineSuggestionId: typing.Union[MetaOapg.properties.machineSuggestionId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        releaseDate: typing.Union[MetaOapg.properties.releaseDate, str, datetime, schemas.Unset] = schemas.unset,
        release: typing.Union[MetaOapg.properties.release, str, schemas.Unset] = schemas.unset,
        releaseNotesUrl: typing.Union[MetaOapg.properties.releaseNotesUrl, str, schemas.Unset] = schemas.unset,
        bugSeverity: typing.Union[MetaOapg.properties.bugSeverity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        advisoriesSeverity: typing.Union[MetaOapg.properties.advisoriesSeverity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fieldNoticeSeverity: typing.Union[MetaOapg.properties.fieldNoticeSeverity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        featuresCount: typing.Union[MetaOapg.properties.featuresCount, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SuggestionSummary':
        return super().__new__(
            cls,
            *_args,
            expectedSoftwareGroupRisk=expectedSoftwareGroupRisk,
            expectedSoftwareGroupRiskCategory=expectedSoftwareGroupRiskCategory,
            machineSuggestionId=machineSuggestionId,
            name=name,
            releaseDate=releaseDate,
            release=release,
            releaseNotesUrl=releaseNotesUrl,
            bugSeverity=bugSeverity,
            advisoriesSeverity=advisoriesSeverity,
            fieldNoticeSeverity=fieldNoticeSeverity,
            featuresCount=featuresCount,
            _configuration=_configuration,
            **kwargs,
        )
