# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class Customer(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            customerId = schemas.StrSchema
            customerName = schemas.StrSchema
            customerGUName = schemas.StrSchema
            
            
            class successTracks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SuccessTracks']:
                        return SuccessTracks
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SuccessTracks'], typing.List['SuccessTracks']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'successTracks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SuccessTracks':
                    return super().__getitem__(i)
            __annotations__ = {
                "customerId": customerId,
                "customerName": customerName,
                "customerGUName": customerGUName,
                "successTracks": successTracks,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerName"]) -> MetaOapg.properties.customerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerGUName"]) -> MetaOapg.properties.customerGUName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successTracks"]) -> MetaOapg.properties.successTracks: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customerId", "customerName", "customerGUName", "successTracks", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerName"]) -> typing.Union[MetaOapg.properties.customerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerGUName"]) -> typing.Union[MetaOapg.properties.customerGUName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successTracks"]) -> typing.Union[MetaOapg.properties.successTracks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customerId", "customerName", "customerGUName", "successTracks", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customerId: typing.Union[MetaOapg.properties.customerId, str, schemas.Unset] = schemas.unset,
        customerName: typing.Union[MetaOapg.properties.customerName, str, schemas.Unset] = schemas.unset,
        customerGUName: typing.Union[MetaOapg.properties.customerGUName, str, schemas.Unset] = schemas.unset,
        successTracks: typing.Union[MetaOapg.properties.successTracks, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Customer':
        return super().__new__(
            cls,
            *_args,
            customerId=customerId,
            customerName=customerName,
            customerGUName=customerGUName,
            successTracks=successTracks,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.success_tracks import SuccessTracks
