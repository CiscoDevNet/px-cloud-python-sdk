# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class RacetrackBuid(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "buId",
            "cavId",
            "customerId",
            "buName",
        }
        
        class properties:
            buId = schemas.StrSchema
            cavId = schemas.StrSchema
            buName = schemas.StrSchema
            customerId = schemas.StrSchema
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RacetrackBuidSolution']:
                        return RacetrackBuidSolution
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RacetrackBuidSolution'], typing.List['RacetrackBuidSolution']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RacetrackBuidSolution':
                    return super().__getitem__(i)
            __annotations__ = {
                "buId": buId,
                "cavId": cavId,
                "buName": buName,
                "customerId": customerId,
                "items": items,
            }
    
    buId: MetaOapg.properties.buId
    cavId: MetaOapg.properties.cavId
    customerId: MetaOapg.properties.customerId
    buName: MetaOapg.properties.buName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buId"]) -> MetaOapg.properties.buId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cavId"]) -> MetaOapg.properties.cavId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buName"]) -> MetaOapg.properties.buName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buId", "cavId", "buName", "customerId", "items", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buId"]) -> MetaOapg.properties.buId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cavId"]) -> MetaOapg.properties.cavId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buName"]) -> MetaOapg.properties.buName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buId", "cavId", "buName", "customerId", "items", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        buId: typing.Union[MetaOapg.properties.buId, str, ],
        cavId: typing.Union[MetaOapg.properties.cavId, str, ],
        customerId: typing.Union[MetaOapg.properties.customerId, str, ],
        buName: typing.Union[MetaOapg.properties.buName, str, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RacetrackBuid':
        return super().__new__(
            cls,
            *_args,
            buId=buId,
            cavId=cavId,
            customerId=customerId,
            buName=buName,
            items=items,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.racetrack_buid_solution import RacetrackBuidSolution
