# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class SoftwareGroupSuggestions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            suggestionsInterval = schemas.StrSchema
            suggestionUpdatedDate = schemas.DateSchema
            suggestionSelectedDate = schemas.DateSchema
            
            
            class releaseSummary(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ReleaseSummary']:
                        return ReleaseSummary
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ReleaseSummary'], typing.List['ReleaseSummary']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'releaseSummary':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ReleaseSummary':
                    return super().__getitem__(i)
            
            
            class suggestionSummaries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SuggestionSummary']:
                        return SuggestionSummary
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SuggestionSummary'], typing.List['SuggestionSummary']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'suggestionSummaries':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SuggestionSummary':
                    return super().__getitem__(i)
            
            
            class softwareGroupRiskTrend(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SoftwareGroupRisk']:
                        return SoftwareGroupRisk
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SoftwareGroupRisk'], typing.List['SoftwareGroupRisk']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'softwareGroupRiskTrend':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SoftwareGroupRisk':
                    return super().__getitem__(i)
            __annotations__ = {
                "suggestionsInterval": suggestionsInterval,
                "suggestionUpdatedDate": suggestionUpdatedDate,
                "suggestionSelectedDate": suggestionSelectedDate,
                "releaseSummary": releaseSummary,
                "suggestionSummaries": suggestionSummaries,
                "softwareGroupRiskTrend": softwareGroupRiskTrend,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggestionsInterval"]) -> MetaOapg.properties.suggestionsInterval: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggestionUpdatedDate"]) -> MetaOapg.properties.suggestionUpdatedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggestionSelectedDate"]) -> MetaOapg.properties.suggestionSelectedDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["releaseSummary"]) -> MetaOapg.properties.releaseSummary: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suggestionSummaries"]) -> MetaOapg.properties.suggestionSummaries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareGroupRiskTrend"]) -> MetaOapg.properties.softwareGroupRiskTrend: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["suggestionsInterval", "suggestionUpdatedDate", "suggestionSelectedDate", "releaseSummary", "suggestionSummaries", "softwareGroupRiskTrend", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggestionsInterval"]) -> typing.Union[MetaOapg.properties.suggestionsInterval, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggestionUpdatedDate"]) -> typing.Union[MetaOapg.properties.suggestionUpdatedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggestionSelectedDate"]) -> typing.Union[MetaOapg.properties.suggestionSelectedDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["releaseSummary"]) -> typing.Union[MetaOapg.properties.releaseSummary, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suggestionSummaries"]) -> typing.Union[MetaOapg.properties.suggestionSummaries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareGroupRiskTrend"]) -> typing.Union[MetaOapg.properties.softwareGroupRiskTrend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["suggestionsInterval", "suggestionUpdatedDate", "suggestionSelectedDate", "releaseSummary", "suggestionSummaries", "softwareGroupRiskTrend", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        suggestionsInterval: typing.Union[MetaOapg.properties.suggestionsInterval, str, schemas.Unset] = schemas.unset,
        suggestionUpdatedDate: typing.Union[MetaOapg.properties.suggestionUpdatedDate, str, date, schemas.Unset] = schemas.unset,
        suggestionSelectedDate: typing.Union[MetaOapg.properties.suggestionSelectedDate, str, date, schemas.Unset] = schemas.unset,
        releaseSummary: typing.Union[MetaOapg.properties.releaseSummary, list, tuple, schemas.Unset] = schemas.unset,
        suggestionSummaries: typing.Union[MetaOapg.properties.suggestionSummaries, list, tuple, schemas.Unset] = schemas.unset,
        softwareGroupRiskTrend: typing.Union[MetaOapg.properties.softwareGroupRiskTrend, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SoftwareGroupSuggestions':
        return super().__new__(
            cls,
            *_args,
            suggestionsInterval=suggestionsInterval,
            suggestionUpdatedDate=suggestionUpdatedDate,
            suggestionSelectedDate=suggestionSelectedDate,
            releaseSummary=releaseSummary,
            suggestionSummaries=suggestionSummaries,
            softwareGroupRiskTrend=softwareGroupRiskTrend,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.release_summary import ReleaseSummary
from pxcloud_api_client.pxcloud_api_client.software_group_risk import SoftwareGroupRisk
from pxcloud_api_client.pxcloud_api_client.suggestion_summary import SuggestionSummary
