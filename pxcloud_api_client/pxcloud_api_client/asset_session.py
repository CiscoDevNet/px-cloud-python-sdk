# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class AssetSession(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class additionalAttendees(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AccSessionAttendees']:
                        return AccSessionAttendees
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AccSessionAttendees'], typing.List['AccSessionAttendees']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'additionalAttendees':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AccSessionAttendees':
                    return super().__getitem__(i)
            businessOutcome = schemas.StrSchema
            ccoId = schemas.StrSchema
            companyName = schemas.StrSchema
            customerId = schemas.StrSchema
            dnacVersion = schemas.StrSchema
            environment = schemas.StrSchema
            preferredLanguage = schemas.StrSchema
            preferredSlot = schemas.StrSchema
            presenterName = schemas.StrSchema
            reasonForInterest = schemas.StrSchema
            sessionId = schemas.StrSchema
            sessionStartDate = schemas.DateTimeSchema
            status = schemas.StrSchema
            timezone = schemas.StrSchema
            userEmail = schemas.StrSchema
            userFullName = schemas.StrSchema
            __annotations__ = {
                "additionalAttendees": additionalAttendees,
                "businessOutcome": businessOutcome,
                "ccoId": ccoId,
                "companyName": companyName,
                "customerId": customerId,
                "dnacVersion": dnacVersion,
                "environment": environment,
                "preferredLanguage": preferredLanguage,
                "preferredSlot": preferredSlot,
                "presenterName": presenterName,
                "reasonForInterest": reasonForInterest,
                "sessionId": sessionId,
                "sessionStartDate": sessionStartDate,
                "status": status,
                "timezone": timezone,
                "userEmail": userEmail,
                "userFullName": userFullName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalAttendees"]) -> MetaOapg.properties.additionalAttendees: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["businessOutcome"]) -> MetaOapg.properties.businessOutcome: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ccoId"]) -> MetaOapg.properties.ccoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dnacVersion"]) -> MetaOapg.properties.dnacVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environment"]) -> MetaOapg.properties.environment: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredLanguage"]) -> MetaOapg.properties.preferredLanguage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferredSlot"]) -> MetaOapg.properties.preferredSlot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["presenterName"]) -> MetaOapg.properties.presenterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reasonForInterest"]) -> MetaOapg.properties.reasonForInterest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionStartDate"]) -> MetaOapg.properties.sessionStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timezone"]) -> MetaOapg.properties.timezone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userEmail"]) -> MetaOapg.properties.userEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userFullName"]) -> MetaOapg.properties.userFullName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["additionalAttendees", "businessOutcome", "ccoId", "companyName", "customerId", "dnacVersion", "environment", "preferredLanguage", "preferredSlot", "presenterName", "reasonForInterest", "sessionId", "sessionStartDate", "status", "timezone", "userEmail", "userFullName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalAttendees"]) -> typing.Union[MetaOapg.properties.additionalAttendees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["businessOutcome"]) -> typing.Union[MetaOapg.properties.businessOutcome, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ccoId"]) -> typing.Union[MetaOapg.properties.ccoId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dnacVersion"]) -> typing.Union[MetaOapg.properties.dnacVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environment"]) -> typing.Union[MetaOapg.properties.environment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredLanguage"]) -> typing.Union[MetaOapg.properties.preferredLanguage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferredSlot"]) -> typing.Union[MetaOapg.properties.preferredSlot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["presenterName"]) -> typing.Union[MetaOapg.properties.presenterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reasonForInterest"]) -> typing.Union[MetaOapg.properties.reasonForInterest, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> typing.Union[MetaOapg.properties.sessionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionStartDate"]) -> typing.Union[MetaOapg.properties.sessionStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timezone"]) -> typing.Union[MetaOapg.properties.timezone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userEmail"]) -> typing.Union[MetaOapg.properties.userEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userFullName"]) -> typing.Union[MetaOapg.properties.userFullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["additionalAttendees", "businessOutcome", "ccoId", "companyName", "customerId", "dnacVersion", "environment", "preferredLanguage", "preferredSlot", "presenterName", "reasonForInterest", "sessionId", "sessionStartDate", "status", "timezone", "userEmail", "userFullName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        additionalAttendees: typing.Union[MetaOapg.properties.additionalAttendees, list, tuple, schemas.Unset] = schemas.unset,
        businessOutcome: typing.Union[MetaOapg.properties.businessOutcome, str, schemas.Unset] = schemas.unset,
        ccoId: typing.Union[MetaOapg.properties.ccoId, str, schemas.Unset] = schemas.unset,
        companyName: typing.Union[MetaOapg.properties.companyName, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, str, schemas.Unset] = schemas.unset,
        dnacVersion: typing.Union[MetaOapg.properties.dnacVersion, str, schemas.Unset] = schemas.unset,
        environment: typing.Union[MetaOapg.properties.environment, str, schemas.Unset] = schemas.unset,
        preferredLanguage: typing.Union[MetaOapg.properties.preferredLanguage, str, schemas.Unset] = schemas.unset,
        preferredSlot: typing.Union[MetaOapg.properties.preferredSlot, str, schemas.Unset] = schemas.unset,
        presenterName: typing.Union[MetaOapg.properties.presenterName, str, schemas.Unset] = schemas.unset,
        reasonForInterest: typing.Union[MetaOapg.properties.reasonForInterest, str, schemas.Unset] = schemas.unset,
        sessionId: typing.Union[MetaOapg.properties.sessionId, str, schemas.Unset] = schemas.unset,
        sessionStartDate: typing.Union[MetaOapg.properties.sessionStartDate, str, datetime, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        timezone: typing.Union[MetaOapg.properties.timezone, str, schemas.Unset] = schemas.unset,
        userEmail: typing.Union[MetaOapg.properties.userEmail, str, schemas.Unset] = schemas.unset,
        userFullName: typing.Union[MetaOapg.properties.userFullName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AssetSession':
        return super().__new__(
            cls,
            *_args,
            additionalAttendees=additionalAttendees,
            businessOutcome=businessOutcome,
            ccoId=ccoId,
            companyName=companyName,
            customerId=customerId,
            dnacVersion=dnacVersion,
            environment=environment,
            preferredLanguage=preferredLanguage,
            preferredSlot=preferredSlot,
            presenterName=presenterName,
            reasonForInterest=reasonForInterest,
            sessionId=sessionId,
            sessionStartDate=sessionStartDate,
            status=status,
            timezone=timezone,
            userEmail=userEmail,
            userFullName=userFullName,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.acc_session_attendees import AccSessionAttendees
