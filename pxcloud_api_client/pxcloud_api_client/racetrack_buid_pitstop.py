# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class RacetrackBuidPitstop(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "pitstopActions",
            "name",
            "description",
            "isComplete",
        }
        
        class properties:
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "onboard": "ONBOARD",
                        "implement": "IMPLEMENT",
                        "use": "USE",
                        "engage": "ENGAGE",
                        "adopt": "ADOPT",
                        "optimize": "OPTIMIZE",
                    }
                
                @schemas.classproperty
                def ONBOARD(cls):
                    return cls("onboard")
                
                @schemas.classproperty
                def IMPLEMENT(cls):
                    return cls("implement")
                
                @schemas.classproperty
                def USE(cls):
                    return cls("use")
                
                @schemas.classproperty
                def ENGAGE(cls):
                    return cls("engage")
                
                @schemas.classproperty
                def ADOPT(cls):
                    return cls("adopt")
                
                @schemas.classproperty
                def OPTIMIZE(cls):
                    return cls("optimize")
            description = schemas.StrSchema
            isComplete = schemas.BoolSchema
            
            
            class pitstopActions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['RacetrackBuidPitstopAction']:
                        return RacetrackBuidPitstopAction
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['RacetrackBuidPitstopAction'], typing.List['RacetrackBuidPitstopAction']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pitstopActions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'RacetrackBuidPitstopAction':
                    return super().__getitem__(i)
            completionPercentage = schemas.IntSchema
            __annotations__ = {
                "name": name,
                "description": description,
                "isComplete": isComplete,
                "pitstopActions": pitstopActions,
                "completionPercentage": completionPercentage,
            }
    
    pitstopActions: MetaOapg.properties.pitstopActions
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    isComplete: MetaOapg.properties.isComplete
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isComplete"]) -> MetaOapg.properties.isComplete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitstopActions"]) -> MetaOapg.properties.pitstopActions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionPercentage"]) -> MetaOapg.properties.completionPercentage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "description", "isComplete", "pitstopActions", "completionPercentage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isComplete"]) -> MetaOapg.properties.isComplete: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitstopActions"]) -> MetaOapg.properties.pitstopActions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionPercentage"]) -> typing.Union[MetaOapg.properties.completionPercentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "description", "isComplete", "pitstopActions", "completionPercentage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pitstopActions: typing.Union[MetaOapg.properties.pitstopActions, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        isComplete: typing.Union[MetaOapg.properties.isComplete, bool, ],
        completionPercentage: typing.Union[MetaOapg.properties.completionPercentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RacetrackBuidPitstop':
        return super().__new__(
            cls,
            *_args,
            pitstopActions=pitstopActions,
            name=name,
            description=description,
            isComplete=isComplete,
            completionPercentage=completionPercentage,
            _configuration=_configuration,
            **kwargs,
        )

from pxcloud_api_client.pxcloud_api_client.racetrack_buid_pitstop_action import RacetrackBuidPitstopAction
