# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class PartnerOfferAttendee(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            attendeeId = schemas.StrSchema
            attendeeUserEmail = schemas.StrSchema
            attendeeUserFullName = schemas.StrSchema
            ccoId = schemas.StrSchema
            companyName = schemas.StrSchema
            customerId = schemas.StrSchema
            __annotations__ = {
                "attendeeId": attendeeId,
                "attendeeUserEmail": attendeeUserEmail,
                "attendeeUserFullName": attendeeUserFullName,
                "ccoId": ccoId,
                "companyName": companyName,
                "customerId": customerId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendeeId"]) -> MetaOapg.properties.attendeeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendeeUserEmail"]) -> MetaOapg.properties.attendeeUserEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attendeeUserFullName"]) -> MetaOapg.properties.attendeeUserFullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ccoId"]) -> MetaOapg.properties.ccoId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyName"]) -> MetaOapg.properties.companyName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attendeeId", "attendeeUserEmail", "attendeeUserFullName", "ccoId", "companyName", "customerId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendeeId"]) -> typing.Union[MetaOapg.properties.attendeeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendeeUserEmail"]) -> typing.Union[MetaOapg.properties.attendeeUserEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attendeeUserFullName"]) -> typing.Union[MetaOapg.properties.attendeeUserFullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ccoId"]) -> typing.Union[MetaOapg.properties.ccoId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyName"]) -> typing.Union[MetaOapg.properties.companyName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attendeeId", "attendeeUserEmail", "attendeeUserFullName", "ccoId", "companyName", "customerId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        attendeeId: typing.Union[MetaOapg.properties.attendeeId, str, schemas.Unset] = schemas.unset,
        attendeeUserEmail: typing.Union[MetaOapg.properties.attendeeUserEmail, str, schemas.Unset] = schemas.unset,
        attendeeUserFullName: typing.Union[MetaOapg.properties.attendeeUserFullName, str, schemas.Unset] = schemas.unset,
        ccoId: typing.Union[MetaOapg.properties.ccoId, str, schemas.Unset] = schemas.unset,
        companyName: typing.Union[MetaOapg.properties.companyName, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PartnerOfferAttendee':
        return super().__new__(
            cls,
            *_args,
            attendeeId=attendeeId,
            attendeeUserEmail=attendeeUserEmail,
            attendeeUserFullName=attendeeUserFullName,
            ccoId=ccoId,
            companyName=companyName,
            customerId=customerId,
            _configuration=_configuration,
            **kwargs,
        )
