# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class Asset(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            deploymentStatus = schemas.StrSchema
            assetName = schemas.StrSchema
            ipAddress = schemas.StrSchema
            selectedRelease = schemas.StrSchema
            softwareType = schemas.StrSchema
            currentRelease = schemas.StrSchema
            __annotations__ = {
                "deploymentStatus": deploymentStatus,
                "assetName": assetName,
                "ipAddress": ipAddress,
                "selectedRelease": selectedRelease,
                "softwareType": softwareType,
                "currentRelease": currentRelease,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deploymentStatus"]) -> MetaOapg.properties.deploymentStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assetName"]) -> MetaOapg.properties.assetName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selectedRelease"]) -> MetaOapg.properties.selectedRelease: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareType"]) -> MetaOapg.properties.softwareType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentRelease"]) -> MetaOapg.properties.currentRelease: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deploymentStatus", "assetName", "ipAddress", "selectedRelease", "softwareType", "currentRelease", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deploymentStatus"]) -> typing.Union[MetaOapg.properties.deploymentStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assetName"]) -> typing.Union[MetaOapg.properties.assetName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selectedRelease"]) -> typing.Union[MetaOapg.properties.selectedRelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareType"]) -> typing.Union[MetaOapg.properties.softwareType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentRelease"]) -> typing.Union[MetaOapg.properties.currentRelease, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deploymentStatus", "assetName", "ipAddress", "selectedRelease", "softwareType", "currentRelease", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        deploymentStatus: typing.Union[MetaOapg.properties.deploymentStatus, str, schemas.Unset] = schemas.unset,
        assetName: typing.Union[MetaOapg.properties.assetName, str, schemas.Unset] = schemas.unset,
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, schemas.Unset] = schemas.unset,
        selectedRelease: typing.Union[MetaOapg.properties.selectedRelease, str, schemas.Unset] = schemas.unset,
        softwareType: typing.Union[MetaOapg.properties.softwareType, str, schemas.Unset] = schemas.unset,
        currentRelease: typing.Union[MetaOapg.properties.currentRelease, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Asset':
        return super().__new__(
            cls,
            *_args,
            deploymentStatus=deploymentStatus,
            assetName=assetName,
            ipAddress=ipAddress,
            selectedRelease=selectedRelease,
            softwareType=softwareType,
            currentRelease=currentRelease,
            _configuration=_configuration,
            **kwargs,
        )
