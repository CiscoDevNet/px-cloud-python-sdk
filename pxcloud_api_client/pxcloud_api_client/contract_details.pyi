# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class ContractDetails(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            customerName = schemas.StrSchema
            customerId = schemas.StrSchema
            customerGUName = schemas.StrSchema
            customerHQName = schemas.StrSchema
            contractNumber = schemas.StrSchema
            
            
            class successTrackId(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int64Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'successTrackId':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            productId = schemas.StrSchema
            serialNumber = schemas.StrSchema
            contractStatus = schemas.StrSchema
            componentType = schemas.StrSchema
            serviceLevel = schemas.StrSchema
            coverageStartDate = schemas.StrSchema
            coverageEndDate = schemas.StrSchema
            installationQuantity = schemas.Int64Schema
            instanceNumber = schemas.Int64Schema
            __annotations__ = {
                "customerName": customerName,
                "customerId": customerId,
                "customerGUName": customerGUName,
                "customerHQName": customerHQName,
                "contractNumber": contractNumber,
                "successTrackId": successTrackId,
                "productId": productId,
                "serialNumber": serialNumber,
                "contractStatus": contractStatus,
                "componentType": componentType,
                "serviceLevel": serviceLevel,
                "coverageStartDate": coverageStartDate,
                "coverageEndDate": coverageEndDate,
                "installationQuantity": installationQuantity,
                "instanceNumber": instanceNumber,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerName"]) -> MetaOapg.properties.customerName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerGUName"]) -> MetaOapg.properties.customerGUName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerHQName"]) -> MetaOapg.properties.customerHQName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractNumber"]) -> MetaOapg.properties.contractNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successTrackId"]) -> MetaOapg.properties.successTrackId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productId"]) -> MetaOapg.properties.productId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serialNumber"]) -> MetaOapg.properties.serialNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractStatus"]) -> MetaOapg.properties.contractStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["componentType"]) -> MetaOapg.properties.componentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceLevel"]) -> MetaOapg.properties.serviceLevel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverageStartDate"]) -> MetaOapg.properties.coverageStartDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coverageEndDate"]) -> MetaOapg.properties.coverageEndDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installationQuantity"]) -> MetaOapg.properties.installationQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceNumber"]) -> MetaOapg.properties.instanceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["customerName", "customerId", "customerGUName", "customerHQName", "contractNumber", "successTrackId", "productId", "serialNumber", "contractStatus", "componentType", "serviceLevel", "coverageStartDate", "coverageEndDate", "installationQuantity", "instanceNumber", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerName"]) -> typing.Union[MetaOapg.properties.customerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerGUName"]) -> typing.Union[MetaOapg.properties.customerGUName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerHQName"]) -> typing.Union[MetaOapg.properties.customerHQName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractNumber"]) -> typing.Union[MetaOapg.properties.contractNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successTrackId"]) -> typing.Union[MetaOapg.properties.successTrackId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productId"]) -> typing.Union[MetaOapg.properties.productId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serialNumber"]) -> typing.Union[MetaOapg.properties.serialNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractStatus"]) -> typing.Union[MetaOapg.properties.contractStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["componentType"]) -> typing.Union[MetaOapg.properties.componentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceLevel"]) -> typing.Union[MetaOapg.properties.serviceLevel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverageStartDate"]) -> typing.Union[MetaOapg.properties.coverageStartDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coverageEndDate"]) -> typing.Union[MetaOapg.properties.coverageEndDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installationQuantity"]) -> typing.Union[MetaOapg.properties.installationQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceNumber"]) -> typing.Union[MetaOapg.properties.instanceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["customerName", "customerId", "customerGUName", "customerHQName", "contractNumber", "successTrackId", "productId", "serialNumber", "contractStatus", "componentType", "serviceLevel", "coverageStartDate", "coverageEndDate", "installationQuantity", "instanceNumber", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        customerName: typing.Union[MetaOapg.properties.customerName, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, str, schemas.Unset] = schemas.unset,
        customerGUName: typing.Union[MetaOapg.properties.customerGUName, str, schemas.Unset] = schemas.unset,
        customerHQName: typing.Union[MetaOapg.properties.customerHQName, str, schemas.Unset] = schemas.unset,
        contractNumber: typing.Union[MetaOapg.properties.contractNumber, str, schemas.Unset] = schemas.unset,
        successTrackId: typing.Union[MetaOapg.properties.successTrackId, list, tuple, schemas.Unset] = schemas.unset,
        productId: typing.Union[MetaOapg.properties.productId, str, schemas.Unset] = schemas.unset,
        serialNumber: typing.Union[MetaOapg.properties.serialNumber, str, schemas.Unset] = schemas.unset,
        contractStatus: typing.Union[MetaOapg.properties.contractStatus, str, schemas.Unset] = schemas.unset,
        componentType: typing.Union[MetaOapg.properties.componentType, str, schemas.Unset] = schemas.unset,
        serviceLevel: typing.Union[MetaOapg.properties.serviceLevel, str, schemas.Unset] = schemas.unset,
        coverageStartDate: typing.Union[MetaOapg.properties.coverageStartDate, str, schemas.Unset] = schemas.unset,
        coverageEndDate: typing.Union[MetaOapg.properties.coverageEndDate, str, schemas.Unset] = schemas.unset,
        installationQuantity: typing.Union[MetaOapg.properties.installationQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        instanceNumber: typing.Union[MetaOapg.properties.instanceNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractDetails':
        return super().__new__(
            cls,
            *_args,
            customerName=customerName,
            customerId=customerId,
            customerGUName=customerGUName,
            customerHQName=customerHQName,
            contractNumber=contractNumber,
            successTrackId=successTrackId,
            productId=productId,
            serialNumber=serialNumber,
            contractStatus=contractStatus,
            componentType=componentType,
            serviceLevel=serviceLevel,
            coverageStartDate=coverageStartDate,
            coverageEndDate=coverageEndDate,
            installationQuantity=installationQuantity,
            instanceNumber=instanceNumber,
            _configuration=_configuration,
            **kwargs,
        )
