# coding: utf-8

"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pxcloud_api_client import schemas  # noqa: F401


class SuccessTrackChecklistMapping(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            checklist = schemas.StrSchema
            checklistId = schemas.StrSchema
            mappingChecklistId = schemas.StrSchema
            __annotations__ = {
                "checklist": checklist,
                "checklistId": checklistId,
                "mappingChecklistId": mappingChecklistId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checklist"]) -> MetaOapg.properties.checklist: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["checklistId"]) -> MetaOapg.properties.checklistId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mappingChecklistId"]) -> MetaOapg.properties.mappingChecklistId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["checklist", "checklistId", "mappingChecklistId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checklist"]) -> typing.Union[MetaOapg.properties.checklist, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["checklistId"]) -> typing.Union[MetaOapg.properties.checklistId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mappingChecklistId"]) -> typing.Union[MetaOapg.properties.mappingChecklistId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["checklist", "checklistId", "mappingChecklistId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        checklist: typing.Union[MetaOapg.properties.checklist, str, schemas.Unset] = schemas.unset,
        checklistId: typing.Union[MetaOapg.properties.checklistId, str, schemas.Unset] = schemas.unset,
        mappingChecklistId: typing.Union[MetaOapg.properties.mappingChecklistId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SuccessTrackChecklistMapping':
        return super().__new__(
            cls,
            *_args,
            checklist=checklist,
            checklistId=checklistId,
            mappingChecklistId=mappingChecklistId,
            _configuration=_configuration,
            **kwargs,
        )
