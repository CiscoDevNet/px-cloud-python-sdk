"""
    Partner Experience Cloud API Python SDK

    Partner Experience Cloud API Python SDK - LA Release  # noqa: E501

    The version of the OpenAPI document: 0.9.0
    Contact: partner-support@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pxcloud_api_client.api_client import ApiClient, Endpoint as _Endpoint
from pxcloud_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pxcloud_api_client.model.asset_response import AssetResponse
from pxcloud_api_client.model.error_response import ErrorResponse
from pxcloud_api_client.model.software_group_bugs_response import SoftwareGroupBugsResponse
from pxcloud_api_client.model.software_group_field_notices_response import SoftwareGroupFieldNoticesResponse
from pxcloud_api_client.model.software_group_response import SoftwareGroupResponse
from pxcloud_api_client.model.software_group_security_advisories_response import SoftwareGroupSecurityAdvisoriesResponse
from pxcloud_api_client.model.software_group_suggestions import SoftwareGroupSuggestions


class InsightsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.software_group_assets_endpoint = _Endpoint(
            settings={
                'response_type': (AssetResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/software/softwareGroups/assets',
                'operation_id': 'software_group_assets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'success_track_id',
                    'software_group_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'customer_id',
                    'success_track_id',
                    'software_group_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'success_track_id':
                        (str,),
                    'software_group_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'success_track_id': 'successTrackId',
                    'software_group_id': 'softwareGroupId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'customer_id': 'path',
                    'success_track_id': 'query',
                    'software_group_id': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.software_group_field_notices_endpoint = _Endpoint(
            settings={
                'response_type': (SoftwareGroupFieldNoticesResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/software/softwareGroups/suggestions/fieldNotices',
                'operation_id': 'software_group_field_notices',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'success_track_id',
                    'machine_suggestion_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'customer_id',
                    'success_track_id',
                    'machine_suggestion_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'success_track_id':
                        (str,),
                    'machine_suggestion_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'success_track_id': 'successTrackId',
                    'machine_suggestion_id': 'machineSuggestionId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'customer_id': 'path',
                    'success_track_id': 'query',
                    'machine_suggestion_id': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.software_group_security_advisories_endpoint = _Endpoint(
            settings={
                'response_type': (SoftwareGroupSecurityAdvisoriesResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/software/softwareGroups/suggestions/securityAdvisories',
                'operation_id': 'software_group_security_advisories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'success_track_id',
                    'machine_suggestion_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'customer_id',
                    'success_track_id',
                    'machine_suggestion_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'success_track_id':
                        (str,),
                    'machine_suggestion_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'success_track_id': 'successTrackId',
                    'machine_suggestion_id': 'machineSuggestionId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'customer_id': 'path',
                    'success_track_id': 'query',
                    'machine_suggestion_id': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.software_group_suggestions_endpoint = _Endpoint(
            settings={
                'response_type': (SoftwareGroupSuggestions,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/software/softwareGroups/suggestions',
                'operation_id': 'software_group_suggestions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'success_track_id',
                    'suggestion_id',
                ],
                'required': [
                    'customer_id',
                    'success_track_id',
                    'suggestion_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'success_track_id':
                        (str,),
                    'suggestion_id':
                        (str,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'success_track_id': 'successTrackId',
                    'suggestion_id': 'suggestionId',
                },
                'location_map': {
                    'customer_id': 'path',
                    'success_track_id': 'query',
                    'suggestion_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.software_group_suggestions_bugs_endpoint = _Endpoint(
            settings={
                'response_type': (SoftwareGroupBugsResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/software/softwareGroups/suggestions/bugs',
                'operation_id': 'software_group_suggestions_bugs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'success_track_id',
                    'machine_suggestion_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'customer_id',
                    'success_track_id',
                    'machine_suggestion_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        (str,),
                    'success_track_id':
                        (str,),
                    'machine_suggestion_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'success_track_id': 'successTrackId',
                    'machine_suggestion_id': 'machineSuggestionId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'customer_id': 'path',
                    'success_track_id': 'query',
                    'machine_suggestion_id': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.software_groups_endpoint = _Endpoint(
            settings={
                'response_type': (SoftwareGroupResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/software/softwareGroups',
                'operation_id': 'software_groups',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'customer_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'success_track_id',
                    'customer_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'customer_id': 'path',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def software_group_assets(
        self,
        customer_id,
        success_track_id,
        software_group_id,
        **kwargs
    ):
        """Asset information in the Software Group  # noqa: E501

        Returns information about assets in the Software Group based on the customerId and softwareGroupId provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.software_group_assets(customer_id, success_track_id, software_group_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): Unique identifier of the customer
            success_track_id (str):
            software_group_id (str): Unique identifier used in CX Cloud to identify the Software Group

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional]
            max (int): The maximum number of items to return. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_id'] = \
            customer_id
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['software_group_id'] = \
            software_group_id
        return self.software_group_assets_endpoint.call_with_http_info(**kwargs)

    def software_group_field_notices(
        self,
        customer_id,
        success_track_id,
        machine_suggestion_id,
        **kwargs
    ):
        """Software Group - Suggestions Field Notices  # noqa: E501

        This API returns field notice information, including ID number, title, and publish date.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.software_group_field_notices(customer_id, success_track_id, machine_suggestion_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): Unique identifier of the customer
            success_track_id (str):
            machine_suggestion_id (str):

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional]
            max (int): The maximum number of items to return. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SoftwareGroupFieldNoticesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_id'] = \
            customer_id
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['machine_suggestion_id'] = \
            machine_suggestion_id
        return self.software_group_field_notices_endpoint.call_with_http_info(**kwargs)

    def software_group_security_advisories(
        self,
        customer_id,
        success_track_id,
        machine_suggestion_id,
        **kwargs
    ):
        """Software Group - Suggestions Security Advisories  # noqa: E501

        This API returns software advisory information, including ID number, version number, and severity level.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.software_group_security_advisories(customer_id, success_track_id, machine_suggestion_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): Unique identifier of the customer
            success_track_id (str):
            machine_suggestion_id (str):

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional]
            max (int): The maximum number of items to return. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SoftwareGroupSecurityAdvisoriesResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_id'] = \
            customer_id
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['machine_suggestion_id'] = \
            machine_suggestion_id
        return self.software_group_security_advisories_endpoint.call_with_http_info(**kwargs)

    def software_group_suggestions(
        self,
        customer_id,
        success_track_id,
        suggestion_id,
        **kwargs
    ):
        """Software Group Suggestions  # noqa: E501

        Returns Software Group suggestions, including detailed information about Cisco software release recommendations and current Cisco software releases running on assets in the Software Group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.software_group_suggestions(customer_id, success_track_id, suggestion_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): Unique identifier of the customer
            success_track_id (str):
            suggestion_id (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SoftwareGroupSuggestions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_id'] = \
            customer_id
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['suggestion_id'] = \
            suggestion_id
        return self.software_group_suggestions_endpoint.call_with_http_info(**kwargs)

    def software_group_suggestions_bugs(
        self,
        customer_id,
        success_track_id,
        machine_suggestion_id,
        **kwargs
    ):
        """Software Group - Suggestions Bugs  # noqa: E501

        This API returns information on bugs, including ID, description, and affected software releases.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.software_group_suggestions_bugs(customer_id, success_track_id, machine_suggestion_id, async_req=True)
        >>> result = thread.get()

        Args:
            customer_id (str): Unique identifier of the customer
            success_track_id (str):
            machine_suggestion_id (str):

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional]
            max (int): The maximum number of items to return. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SoftwareGroupBugsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['customer_id'] = \
            customer_id
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['machine_suggestion_id'] = \
            machine_suggestion_id
        return self.software_group_suggestions_bugs_endpoint.call_with_http_info(**kwargs)

    def software_groups(
        self,
        success_track_id,
        customer_id,
        **kwargs
    ):
        """Software Group Information  # noqa: E501

        Returns Software Group information for the customerId provided  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.software_groups(success_track_id, customer_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            customer_id (str): Unique identifier of the customer

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional]
            max (int): The maximum number of items to return. [optional] if omitted the server will use the default value of 50
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SoftwareGroupResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        return self.software_groups_endpoint.call_with_http_info(**kwargs)

