"""
    PX Cloud for Success Tracks API

    PX Cloud for Success Tracks API  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pxcloud_api_client.api_client import ApiClient, Endpoint as _Endpoint
from pxcloud_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pxcloud_api_client.model.contract_details_response import ContractDetailsResponse
from pxcloud_api_client.model.contract_response import ContractResponse
from pxcloud_api_client.model.contracts_v2_response import ContractsV2Response
from pxcloud_api_client.model.error_response import ErrorResponse
from pxcloud_api_client.model.partner_asset_response import PartnerAssetResponse
from pxcloud_api_client.model.partner_offer_with_sessions import PartnerOfferWithSessions


class PartnerDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_contract_details_endpoint = _Endpoint(
            settings={
                'response_type': (ContractDetailsResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/contract/details',
                'operation_id': 'get_contract_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'contract_number',
                    'success_track_id',
                    'max',
                    'offset',
                    'component_type',
                    'contract_line_item_type',
                    'customer_id',
                ],
                'required': [
                    'contract_number',
                    'success_track_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'contract_line_item_type',
                ],
                'validation': [
                    'max',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('max',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('contract_line_item_type',): {

                        "PARENT": "PARENT",
                        "CHILD": "CHILD",
                        "STANDALONE": "STANDALONE"
                    },
                },
                'openapi_types': {
                    'contract_number':
                        (int,),
                    'success_track_id':
                        (str,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'component_type':
                        (str,),
                    'contract_line_item_type':
                        (str,),
                    'customer_id':
                        (str,),
                },
                'attribute_map': {
                    'contract_number': 'contractNumber',
                    'success_track_id': 'successTrackId',
                    'max': 'max',
                    'offset': 'offset',
                    'component_type': 'componentType',
                    'contract_line_item_type': 'contractLineItemType',
                    'customer_id': 'customerId',
                },
                'location_map': {
                    'contract_number': 'query',
                    'success_track_id': 'query',
                    'max': 'query',
                    'offset': 'query',
                    'component_type': 'query',
                    'contract_line_item_type': 'query',
                    'customer_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_contracts_endpoint = _Endpoint(
            settings={
                'response_type': (ContractResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/contracts',
                'operation_id': 'get_contracts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'max',
                    'offset',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'max',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('max',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'max':
                        (int,),
                    'offset':
                        (int,),
                },
                'attribute_map': {
                    'max': 'max',
                    'offset': 'offset',
                },
                'location_map': {
                    'max': 'query',
                    'offset': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_contracts_with_customers_endpoint = _Endpoint(
            settings={
                'response_type': (ContractsV2Response,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/contractsWithCustomers',
                'operation_id': 'get_contracts_with_customers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'max',
                    'offset',
                    'customer_gu_name',
                    'customer_id',
                ],
                'required': [
                    'success_track_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'max',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('max',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'customer_gu_name':
                        (str,),
                    'customer_id':
                        (str,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'max': 'max',
                    'offset': 'offset',
                    'customer_gu_name': 'customerGUName',
                    'customer_id': 'customerId',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'max': 'query',
                    'offset': 'query',
                    'customer_gu_name': 'query',
                    'customer_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_partner_offers_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerAssetResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/partnerOffers',
                'operation_id': 'get_partner_offers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'max',
                    'offset',
                    'customer_id',
                    'offer_status',
                    'offer_type',
                ],
                'required': [
                    'success_track_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'offer_status',
                    'offer_type',
                ],
                'validation': [
                    'max',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('max',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('offer_status',): {

                        "IDLE": "Idle",
                        "PUBLISHED": "Published",
                        "UNPUBLISHED": "Unpublished"
                    },
                    ('offer_type',): {

                        "ACCELERATOR": "Accelerator",
                        "ASK_THE_EXPERTS": "Ask the Experts"
                    },
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'customer_id':
                        (str,),
                    'offer_status':
                        (str,),
                    'offer_type':
                        (str,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'max': 'max',
                    'offset': 'offset',
                    'customer_id': 'customerId',
                    'offer_status': 'offerStatus',
                    'offer_type': 'offerType',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'max': 'query',
                    'offset': 'query',
                    'customer_id': 'query',
                    'offer_status': 'query',
                    'offer_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_partner_offers_sessions_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerOfferWithSessions,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/partnerOffersSessions',
                'operation_id': 'get_partner_offers_sessions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'max',
                    'offset',
                    'customer_id',
                    'offer_id',
                    'offer_status',
                    'offer_type',
                ],
                'required': [
                    'success_track_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'offer_status',
                    'offer_type',
                ],
                'validation': [
                    'max',
                    'offset',
                ]
            },
            root_map={
                'validations': {
                    ('max',): {

                        'inclusive_minimum': 1,
                    },
                    ('offset',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('offer_status',): {

                        "IDLE": "Idle",
                        "PUBLISHED": "Published",
                        "UNPUBLISHED": "Unpublished"
                    },
                    ('offer_type',): {

                        "ACCELERATOR": "Accelerator",
                        "ASK_THE_EXPERTS": "Ask the Experts"
                    },
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'max':
                        (int,),
                    'offset':
                        (int,),
                    'customer_id':
                        (str,),
                    'offer_id':
                        (str,),
                    'offer_status':
                        (str,),
                    'offer_type':
                        (str,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'max': 'max',
                    'offset': 'offset',
                    'customer_id': 'customerId',
                    'offer_id': 'offerId',
                    'offer_status': 'offerStatus',
                    'offer_type': 'offerType',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'max': 'query',
                    'offset': 'query',
                    'customer_id': 'query',
                    'offer_id': 'query',
                    'offer_status': 'query',
                    'offer_type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_contract_details(
        self,
        contract_number,
        success_track_id,
        **kwargs
    ):
        """Get customer contract details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_contract_details(contract_number, success_track_id, async_req=True)
        >>> result = thread.get()

        Args:
            contract_number (int):
            success_track_id (str):

        Keyword Args:
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            component_type (str): Deprecated, use `contractLineItemType`.. [optional]
            contract_line_item_type (str): [optional]
            customer_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ContractDetailsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['contract_number'] = \
            contract_number
        kwargs['success_track_id'] = \
            success_track_id
        return self.get_contract_details_endpoint.call_with_http_info(**kwargs)

    def get_contracts(
        self,
        **kwargs
    ):
        """List customer contracts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_contracts(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ContractResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_contracts_endpoint.call_with_http_info(**kwargs)

    def get_contracts_with_customers(
        self,
        success_track_id,
        **kwargs
    ):
        """List contracts with customer details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_contracts_with_customers(success_track_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):

        Keyword Args:
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            customer_gu_name (str): customerGUName. [optional]
            customer_id (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ContractsV2Response
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        return self.get_contracts_with_customers_endpoint.call_with_http_info(**kwargs)

    def get_partner_offers(
        self,
        success_track_id,
        **kwargs
    ):
        """List partner offers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_partner_offers(success_track_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):

        Keyword Args:
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            customer_id (str): [optional]
            offer_status (str): [optional]
            offer_type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerAssetResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        return self.get_partner_offers_endpoint.call_with_http_info(**kwargs)

    def get_partner_offers_sessions(
        self,
        success_track_id,
        **kwargs
    ):
        """Get partner offers session details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_partner_offers_sessions(success_track_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):

        Keyword Args:
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            customer_id (str): [optional]
            offer_id (str): [optional]
            offer_status (str): [optional]
            offer_type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerOfferWithSessions
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        return self.get_partner_offers_sessions_endpoint.call_with_http_info(**kwargs)

