"""
    Partner Experience Cloud API Python SDK

    Partner Experience Cloud API Python SDK - LA Release  # noqa: E501

    The version of the OpenAPI document: 0.9.11
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from pxcloud_api_client.api_client import ApiClient, Endpoint as _Endpoint
from pxcloud_api_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from pxcloud_api_client.model.asset_violations_response import AssetViolationsResponse
from pxcloud_api_client.model.assets_violations_response import AssetsViolationsResponse
from pxcloud_api_client.model.assets_with_violations_response import AssetsWithViolationsResponse
from pxcloud_api_client.model.error_response import ErrorResponse
from pxcloud_api_client.model.opt_in_response import OptInResponse
from pxcloud_api_client.model.policy_rule_details import PolicyRuleDetails
from pxcloud_api_client.model.suggestions_response import SuggestionsResponse
from pxcloud_api_client.model.violation_summary_response import ViolationSummaryResponse


class ComplianceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_asset_violations_endpoint = _Endpoint(
            settings={
                'response_type': (AssetViolationsResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/assetViolations',
                'operation_id': 'get_asset_violations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'source_system_id',
                    'customer_id',
                    'asset_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'success_track_id',
                    'source_system_id',
                    'customer_id',
                    'asset_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'source_system_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'asset_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'source_system_id': 'sourceSystemId',
                    'customer_id': 'customerId',
                    'asset_id': 'assetId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'source_system_id': 'query',
                    'customer_id': 'path',
                    'asset_id': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_assets_with_violations_endpoint = _Endpoint(
            settings={
                'response_type': (AssetsWithViolationsResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/assetsWithViolations',
                'operation_id': 'get_assets_with_violations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'customer_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'success_track_id',
                    'customer_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'customer_id': 'path',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_opt_in_endpoint = _Endpoint(
            settings={
                'response_type': (OptInResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/optIn',
                'operation_id': 'get_opt_in',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'customer_id',
                ],
                'required': [
                    'success_track_id',
                    'customer_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'customer_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_policy_rule_details_endpoint = _Endpoint(
            settings={
                'response_type': (PolicyRuleDetails,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/policyRuleDetails',
                'operation_id': 'get_policy_rule_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'customer_id',
                    'policy_category',
                    'policy_group_id',
                    'policy_id',
                    'rule_id',
                    'severity',
                ],
                'required': [
                    'success_track_id',
                    'customer_id',
                    'policy_category',
                    'policy_group_id',
                    'policy_id',
                    'rule_id',
                    'severity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'policy_category':
                        (str,),
                    'policy_group_id':
                        (str,),
                    'policy_id':
                        (str,),
                    'rule_id':
                        (str,),
                    'severity':
                        (str,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                    'policy_category': 'policyCategory',
                    'policy_group_id': 'policyGroupId',
                    'policy_id': 'policyId',
                    'rule_id': 'ruleId',
                    'severity': 'severity',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'customer_id': 'path',
                    'policy_category': 'query',
                    'policy_group_id': 'query',
                    'policy_id': 'query',
                    'rule_id': 'query',
                    'severity': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_suggestions_endpoint = _Endpoint(
            settings={
                'response_type': (SuggestionsResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/suggestions',
                'operation_id': 'get_suggestions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'policy_category',
                    'success_track_id',
                    'customer_id',
                    'policy_group_id',
                    'policy_id',
                    'rule_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'policy_category',
                    'success_track_id',
                    'customer_id',
                    'policy_group_id',
                    'policy_id',
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'policy_category':
                        (str,),
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'policy_group_id':
                        (str,),
                    'policy_id':
                        (str,),
                    'rule_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'policy_category': 'policyCategory',
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                    'policy_group_id': 'policyGroupId',
                    'policy_id': 'policyId',
                    'rule_id': 'ruleId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'policy_category': 'query',
                    'success_track_id': 'query',
                    'customer_id': 'path',
                    'policy_group_id': 'query',
                    'policy_id': 'query',
                    'rule_id': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_violations_endpoint = _Endpoint(
            settings={
                'response_type': (ViolationSummaryResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/violations',
                'operation_id': 'get_violations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'customer_id',
                    'offset',
                    'max',
                ],
                'required': [
                    'success_track_id',
                    'customer_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'customer_id': 'path',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_violations_assets_endpoint = _Endpoint(
            settings={
                'response_type': (AssetsViolationsResponse,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/customers/{customerId}/insights/compliance/violations/assets',
                'operation_id': 'get_violations_assets',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'success_track_id',
                    'customer_id',
                    'policy_category',
                    'policy_group_id',
                    'policy_id',
                    'rule_id',
                    'severity',
                    'offset',
                    'max',
                ],
                'required': [
                    'success_track_id',
                    'customer_id',
                    'policy_category',
                    'policy_group_id',
                    'policy_id',
                    'rule_id',
                    'severity',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'success_track_id':
                        (str,),
                    'customer_id':
                        (str,),
                    'policy_category':
                        (str,),
                    'policy_group_id':
                        (str,),
                    'policy_id':
                        (str,),
                    'rule_id':
                        (str,),
                    'severity':
                        (str,),
                    'offset':
                        (int,),
                    'max':
                        (int,),
                },
                'attribute_map': {
                    'success_track_id': 'successTrackId',
                    'customer_id': 'customerId',
                    'policy_category': 'policyCategory',
                    'policy_group_id': 'policyGroupId',
                    'policy_id': 'policyId',
                    'rule_id': 'ruleId',
                    'severity': 'severity',
                    'offset': 'offset',
                    'max': 'max',
                },
                'location_map': {
                    'success_track_id': 'query',
                    'customer_id': 'path',
                    'policy_category': 'query',
                    'policy_group_id': 'query',
                    'policy_id': 'query',
                    'rule_id': 'query',
                    'severity': 'query',
                    'offset': 'query',
                    'max': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_asset_violations(
        self,
        success_track_id,
        source_system_id,
        customer_id,
        asset_id,
        **kwargs
    ):
        """List the violations of the asset  # noqa: E501

        Returns information about the rules violated by an asset based on the customer and asset information provided. Default is ruleSeverityId(desc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_violations(success_track_id, source_system_id, customer_id, asset_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            source_system_id (str):
            customer_id (str): Unique identifier of the customer
            asset_id (str):

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetViolationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['source_system_id'] = \
            source_system_id
        kwargs['customer_id'] = \
            customer_id
        kwargs['asset_id'] = \
            asset_id
        return self.get_asset_violations_endpoint.call_with_http_info(**kwargs)

    def get_assets_with_violations(
        self,
        success_track_id,
        customer_id,
        **kwargs
    ):
        """Fetch the asset summary  # noqa: E501

        Returns information about assets that have at least one rule violation based on the customerId provided. Default is severityId(desc), violationCount(desc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_assets_with_violations(success_track_id, customer_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            customer_id (str): Unique identifier of the customer

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetsWithViolationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        return self.get_assets_with_violations_endpoint.call_with_http_info(**kwargs)

    def get_opt_in(
        self,
        success_track_id,
        customer_id,
        **kwargs
    ):
        """Fetch optIn status  # noqa: E501

        Returns information about whether the customer has successfully configured the regulatory compliance feature and has assets that are qualified to be checked.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_opt_in(success_track_id, customer_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            customer_id (str): Unique identifier of the customer

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            OptInResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        return self.get_opt_in_endpoint.call_with_http_info(**kwargs)

    def get_policy_rule_details(
        self,
        success_track_id,
        customer_id,
        policy_category,
        policy_group_id,
        policy_id,
        rule_id,
        severity,
        **kwargs
    ):
        """Fetch information about the policy the rule belongs to  # noqa: E501

        Returns information about the policy the rule belongs to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_policy_rule_details(success_track_id, customer_id, policy_category, policy_group_id, policy_id, rule_id, severity, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            customer_id (str): Unique identifier of the customer
            policy_category (str):
            policy_group_id (str):
            policy_id (str):
            rule_id (str):
            severity (str):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PolicyRuleDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        kwargs['policy_category'] = \
            policy_category
        kwargs['policy_group_id'] = \
            policy_group_id
        kwargs['policy_id'] = \
            policy_id
        kwargs['rule_id'] = \
            rule_id
        kwargs['severity'] = \
            severity
        return self.get_policy_rule_details_endpoint.call_with_http_info(**kwargs)

    def get_suggestions(
        self,
        policy_category,
        success_track_id,
        customer_id,
        policy_group_id,
        policy_id,
        rule_id,
        **kwargs
    ):
        """Get the Suggestions filtered upon Severity (if given), for summary tab  # noqa: E501

        Returns information about the violated rule conditions, including suggested remediation steps, based on the customer, policy, and rule information provided. Default sorting is severityId(desc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_suggestions(policy_category, success_track_id, customer_id, policy_group_id, policy_id, rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            policy_category (str):
            success_track_id (str):
            customer_id (str): Unique identifier of the customer
            policy_group_id (str):
            policy_id (str):
            rule_id (str):

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SuggestionsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['policy_category'] = \
            policy_category
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        kwargs['policy_group_id'] = \
            policy_group_id
        kwargs['policy_id'] = \
            policy_id
        kwargs['rule_id'] = \
            rule_id
        return self.get_suggestions_endpoint.call_with_http_info(**kwargs)

    def get_violations(
        self,
        success_track_id,
        customer_id,
        **kwargs
    ):
        """Fetch the violation summary of a customer  # noqa: E501

        Returns information about the rules violated for the customerId provided Default sorting is, severityId(asc), violationCount(desc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_violations(success_track_id, customer_id, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            customer_id (str): Unique identifier of the customer

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            ViolationSummaryResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        return self.get_violations_endpoint.call_with_http_info(**kwargs)

    def get_violations_assets(
        self,
        success_track_id,
        customer_id,
        policy_category,
        policy_group_id,
        policy_id,
        rule_id,
        severity,
        **kwargs
    ):
        """Fetch the violation details of impacted assets for the customer, and selected policy Group, Policy and Rule  # noqa: E501

        Returns information about the customer assets in violation of the rule based on the customer, policy, and rule information provided. Default sorting is, assetName(asc)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_violations_assets(success_track_id, customer_id, policy_category, policy_group_id, policy_id, rule_id, severity, async_req=True)
        >>> result = thread.get()

        Args:
            success_track_id (str):
            customer_id (str): Unique identifier of the customer
            policy_category (str):
            policy_group_id (str):
            policy_id (str):
            rule_id (str):
            severity (str):

        Keyword Args:
            offset (int): The number of items to skip before starting to collect the result set. The default value is 1.. [optional] if omitted the server will use the default value of 1
            max (int): The maximum number of items to return. The default value is 10.. [optional] if omitted the server will use the default value of 10
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            AssetsViolationsResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['success_track_id'] = \
            success_track_id
        kwargs['customer_id'] = \
            customer_id
        kwargs['policy_category'] = \
            policy_category
        kwargs['policy_group_id'] = \
            policy_group_id
        kwargs['policy_id'] = \
            policy_id
        kwargs['rule_id'] = \
            rule_id
        kwargs['severity'] = \
            severity
        return self.get_violations_assets_endpoint.call_with_http_info(**kwargs)

