"""
    CX Partner Portal APIs

    CX Partner Portal APIs for the Partners - LA Release  # noqa: E501

    The version of the OpenAPI document: 0.9.0
    Contact: partner-support@cisco.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from px_v1_python_sdk.model.error_response import ErrorResponse
from px_v1_python_sdk.model.partner_offers_info import PartnerOffersInfo


class PartnerOffersDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_partner_offers_endpoint = _Endpoint(
            settings={
                'response_type': (PartnerOffersInfo,),
                'auth': [
                    'oAuth2'
                ],
                'endpoint_path': '/v1/partnerOffers',
                'operation_id': 'get_partner_offers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'customer_id',
                    'offer_status',
                    'offer_type',
                    'page',
                    'pagination_required',
                    'partner_id',
                    'rows',
                    'success_track_id',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'customer_id':
                        ([str],),
                    'offer_status':
                        ([str],),
                    'offer_type':
                        ([str],),
                    'page':
                        (int,),
                    'pagination_required':
                        (bool,),
                    'partner_id':
                        ([int],),
                    'rows':
                        (int,),
                    'success_track_id':
                        ([str],),
                },
                'attribute_map': {
                    'customer_id': 'customerId',
                    'offer_status': 'offerStatus',
                    'offer_type': 'offerType',
                    'page': 'page',
                    'pagination_required': 'paginationRequired',
                    'partner_id': 'partnerId',
                    'rows': 'rows',
                    'success_track_id': 'successTrackId',
                },
                'location_map': {
                    'customer_id': 'query',
                    'offer_status': 'query',
                    'offer_type': 'query',
                    'page': 'query',
                    'pagination_required': 'query',
                    'partner_id': 'header',
                    'rows': 'query',
                    'success_track_id': 'query',
                },
                'collection_format_map': {
                    'customer_id': 'multi',
                    'offer_status': 'multi',
                    'offer_type': 'multi',
                    'partner_id': 'csv',
                    'success_track_id': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_partner_offers(
        self,
        **kwargs
    ):
        """Get Partner Offers  # noqa: E501

        Partner Offers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_partner_offers(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            customer_id ([str]): Customer Id's for filtering the results. [optional]
            offer_status ([str]): Status for filtering the results. [optional]
            offer_type ([str]): Asset Type for filtering the results. [optional]
            page (int): Page number. Default value is 1. [optional] if omitted the server will use the default value of 1
            pagination_required (bool): Pagination data required flag. [optional] if omitted the server will use the default value of True
            partner_id ([int]): Partner ID for filtering the results. [optional]
            rows (int): No of rows in a page. Default value is 10 and the maximum rows allowed per page is 100. [optional] if omitted the server will use the default value of 10
            success_track_id ([str]): Solution Id field for filtering the results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PartnerOffersInfo
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_partner_offers_endpoint.call_with_http_info(**kwargs)

